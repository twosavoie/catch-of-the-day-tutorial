{"ast":null,"code":"var utils = require('../utils'),\n  nodes = require('../nodes');\n\n/**\n * Returns the transparent version of the given `top` color,\n * as if it was blend over the given `bottom` color.\n *\n * Examples:\n *\n *     transparentify(#808080)\n *     => rgba(0,0,0,0.5)\n *\n *     transparentify(#414141, #000)\n *     => rgba(255,255,255,0.25)\n *\n *     transparentify(#91974C, #F34949, 0.5)\n *     => rgba(47,229,79,0.5)\n *\n * @param {RGBA|HSLA} top\n * @param {RGBA|HSLA} [bottom=#fff]\n * @param {Unit} [alpha]\n * @return {RGBA}\n * @api public\n */\n\nfunction transparentify(top, bottom, alpha) {\n  utils.assertColor(top);\n  top = top.rgba;\n  // Handle default arguments\n  bottom = bottom || new nodes.RGBA(255, 255, 255, 1);\n  if (!alpha && bottom && !bottom.rgba) {\n    alpha = bottom;\n    bottom = new nodes.RGBA(255, 255, 255, 1);\n  }\n  utils.assertColor(bottom);\n  bottom = bottom.rgba;\n  var bestAlpha = ['r', 'g', 'b'].map(function (channel) {\n    return (top[channel] - bottom[channel]) / ((0 < top[channel] - bottom[channel] ? 255 : 0) - bottom[channel]);\n  }).sort(function (a, b) {\n    return b - a;\n  })[0];\n  if (alpha) {\n    utils.assertType(alpha, 'unit', 'alpha');\n    if ('%' == alpha.type) {\n      bestAlpha = alpha.val / 100;\n    } else if (!alpha.type) {\n      bestAlpha = alpha = alpha.val;\n    }\n  }\n  bestAlpha = Math.max(Math.min(bestAlpha, 1), 0);\n  // Calculate the resulting color\n  function processChannel(channel) {\n    if (0 == bestAlpha) {\n      return bottom[channel];\n    } else {\n      return bottom[channel] + (top[channel] - bottom[channel]) / bestAlpha;\n    }\n  }\n  return new nodes.RGBA(processChannel('r'), processChannel('g'), processChannel('b'), Math.round(bestAlpha * 100) / 100);\n}\ntransparentify.params = ['top', 'bottom', 'alpha'];\nmodule.exports = transparentify;","map":{"version":3,"names":["utils","require","nodes","transparentify","top","bottom","alpha","assertColor","rgba","RGBA","bestAlpha","map","channel","sort","a","b","assertType","type","val","Math","max","min","processChannel","round","params","module","exports"],"sources":["/Users/lisasavoie/Desktop/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/stylus/lib/functions/transparentify.js"],"sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Returns the transparent version of the given `top` color,\n * as if it was blend over the given `bottom` color.\n *\n * Examples:\n *\n *     transparentify(#808080)\n *     => rgba(0,0,0,0.5)\n *\n *     transparentify(#414141, #000)\n *     => rgba(255,255,255,0.25)\n *\n *     transparentify(#91974C, #F34949, 0.5)\n *     => rgba(47,229,79,0.5)\n *\n * @param {RGBA|HSLA} top\n * @param {RGBA|HSLA} [bottom=#fff]\n * @param {Unit} [alpha]\n * @return {RGBA}\n * @api public\n */\n\nfunction transparentify(top, bottom, alpha){\n  utils.assertColor(top);\n  top = top.rgba;\n  // Handle default arguments\n  bottom = bottom || new nodes.RGBA(255, 255, 255, 1);\n  if (!alpha && bottom && !bottom.rgba) {\n    alpha = bottom;\n    bottom = new nodes.RGBA(255, 255, 255, 1);\n  }\n  utils.assertColor(bottom);\n  bottom = bottom.rgba;\n  var bestAlpha = ['r', 'g', 'b'].map(function(channel){\n    return (top[channel] - bottom[channel]) / ((0 < (top[channel] - bottom[channel]) ? 255 : 0) - bottom[channel]);\n  }).sort(function(a, b){return b - a;})[0];\n  if (alpha) {\n    utils.assertType(alpha, 'unit', 'alpha');\n    if ('%' == alpha.type) {\n      bestAlpha = alpha.val / 100;\n    } else if (!alpha.type) {\n      bestAlpha = alpha = alpha.val;\n    }\n  }\n  bestAlpha = Math.max(Math.min(bestAlpha, 1), 0);\n  // Calculate the resulting color\n  function processChannel(channel) {\n    if (0 == bestAlpha) {\n      return bottom[channel]\n    } else {\n      return bottom[channel] + (top[channel] - bottom[channel]) / bestAlpha\n    }\n  }\n  return new nodes.RGBA(\n    processChannel('r'),\n    processChannel('g'),\n    processChannel('b'),\n    Math.round(bestAlpha * 100) / 100\n  );\n}\ntransparentify.params = ['top', 'bottom', 'alpha'];\nmodule.exports = transparentify;\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAU,CAAC;EAC3BC,KAAK,GAAGD,OAAO,CAAC,UAAU,CAAC;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASE,cAAc,CAACC,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAC;EACzCN,KAAK,CAACO,WAAW,CAACH,GAAG,CAAC;EACtBA,GAAG,GAAGA,GAAG,CAACI,IAAI;EACd;EACAH,MAAM,GAAGA,MAAM,IAAI,IAAIH,KAAK,CAACO,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;EACnD,IAAI,CAACH,KAAK,IAAID,MAAM,IAAI,CAACA,MAAM,CAACG,IAAI,EAAE;IACpCF,KAAK,GAAGD,MAAM;IACdA,MAAM,GAAG,IAAIH,KAAK,CAACO,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;EAC3C;EACAT,KAAK,CAACO,WAAW,CAACF,MAAM,CAAC;EACzBA,MAAM,GAAGA,MAAM,CAACG,IAAI;EACpB,IAAIE,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACC,GAAG,CAAC,UAASC,OAAO,EAAC;IACnD,OAAO,CAACR,GAAG,CAACQ,OAAO,CAAC,GAAGP,MAAM,CAACO,OAAO,CAAC,KAAK,CAAC,CAAC,GAAIR,GAAG,CAACQ,OAAO,CAAC,GAAGP,MAAM,CAACO,OAAO,CAAE,GAAG,GAAG,GAAG,CAAC,IAAIP,MAAM,CAACO,OAAO,CAAC,CAAC;EAChH,CAAC,CAAC,CAACC,IAAI,CAAC,UAASC,CAAC,EAAEC,CAAC,EAAC;IAAC,OAAOA,CAAC,GAAGD,CAAC;EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACzC,IAAIR,KAAK,EAAE;IACTN,KAAK,CAACgB,UAAU,CAACV,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC;IACxC,IAAI,GAAG,IAAIA,KAAK,CAACW,IAAI,EAAE;MACrBP,SAAS,GAAGJ,KAAK,CAACY,GAAG,GAAG,GAAG;IAC7B,CAAC,MAAM,IAAI,CAACZ,KAAK,CAACW,IAAI,EAAE;MACtBP,SAAS,GAAGJ,KAAK,GAAGA,KAAK,CAACY,GAAG;IAC/B;EACF;EACAR,SAAS,GAAGS,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACX,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/C;EACA,SAASY,cAAc,CAACV,OAAO,EAAE;IAC/B,IAAI,CAAC,IAAIF,SAAS,EAAE;MAClB,OAAOL,MAAM,CAACO,OAAO,CAAC;IACxB,CAAC,MAAM;MACL,OAAOP,MAAM,CAACO,OAAO,CAAC,GAAG,CAACR,GAAG,CAACQ,OAAO,CAAC,GAAGP,MAAM,CAACO,OAAO,CAAC,IAAIF,SAAS;IACvE;EACF;EACA,OAAO,IAAIR,KAAK,CAACO,IAAI,CACnBa,cAAc,CAAC,GAAG,CAAC,EACnBA,cAAc,CAAC,GAAG,CAAC,EACnBA,cAAc,CAAC,GAAG,CAAC,EACnBH,IAAI,CAACI,KAAK,CAACb,SAAS,GAAG,GAAG,CAAC,GAAG,GAAG,CAClC;AACH;AACAP,cAAc,CAACqB,MAAM,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC;AAClDC,MAAM,CAACC,OAAO,GAAGvB,cAAc"},"metadata":{},"sourceType":"script"}