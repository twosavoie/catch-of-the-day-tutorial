{"ast":null,"code":"var utils = require('../utils'),\n  nodes = require('../nodes'),\n  Image = require('./image');\n\n/**\n * Return the width and height of the given `img` path.\n *\n * Examples:\n *\n *    image-size('foo.png')\n *    // => 200px 100px\n *\n *    image-size('foo.png')[0]\n *    // => 200px\n *\n *    image-size('foo.png')[1]\n *    // => 100px\n *\n * Can be used to test if the image exists,\n * using an optional argument set to `true`\n * (without this argument this function throws error\n * if there is no such image).\n *\n * Example:\n *\n *    image-size('nosuchimage.png', true)[0]\n *    // => 0\n *\n * @param {String} img\n * @param {Boolean} ignoreErr\n * @return {Expression}\n * @api public\n */\n\nfunction imageSize(img, ignoreErr) {\n  utils.assertType(img, 'string', 'img');\n  try {\n    var img = new Image(this, img.string);\n  } catch (err) {\n    if (ignoreErr) {\n      return [new nodes.Unit(0), new nodes.Unit(0)];\n    } else {\n      throw err;\n    }\n  }\n\n  // Read size\n  img.open();\n  var size = img.size();\n  img.close();\n\n  // Return (w h)\n  var expr = [];\n  expr.push(new nodes.Unit(size[0], 'px'));\n  expr.push(new nodes.Unit(size[1], 'px'));\n  return expr;\n}\n;\nimageSize.params = ['img', 'ignoreErr'];\nmodule.exports = imageSize;","map":{"version":3,"names":["utils","require","nodes","Image","imageSize","img","ignoreErr","assertType","string","err","Unit","open","size","close","expr","push","params","module","exports"],"sources":["/Users/lisasavoie/Desktop/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/stylus/lib/functions/image-size.js"],"sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes')\n  , Image = require('./image');\n\n/**\n * Return the width and height of the given `img` path.\n *\n * Examples:\n *\n *    image-size('foo.png')\n *    // => 200px 100px\n *\n *    image-size('foo.png')[0]\n *    // => 200px\n *\n *    image-size('foo.png')[1]\n *    // => 100px\n *\n * Can be used to test if the image exists,\n * using an optional argument set to `true`\n * (without this argument this function throws error\n * if there is no such image).\n *\n * Example:\n *\n *    image-size('nosuchimage.png', true)[0]\n *    // => 0\n *\n * @param {String} img\n * @param {Boolean} ignoreErr\n * @return {Expression}\n * @api public\n */\n\nfunction imageSize(img, ignoreErr) {\n  utils.assertType(img, 'string', 'img');\n  try {\n    var img = new Image(this, img.string);\n  } catch (err) {\n    if (ignoreErr) {\n      return [new nodes.Unit(0), new nodes.Unit(0)];\n    } else {\n      throw err;\n    }\n  }\n\n  // Read size\n  img.open();\n  var size = img.size();\n  img.close();\n\n  // Return (w h)\n  var expr = [];\n  expr.push(new nodes.Unit(size[0], 'px'));\n  expr.push(new nodes.Unit(size[1], 'px'));\n\n  return expr;\n};\nimageSize.params = ['img', 'ignoreErr'];\nmodule.exports = imageSize;\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAU,CAAC;EAC3BC,KAAK,GAAGD,OAAO,CAAC,UAAU,CAAC;EAC3BE,KAAK,GAAGF,OAAO,CAAC,SAAS,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,SAAS,CAACC,GAAG,EAAEC,SAAS,EAAE;EACjCN,KAAK,CAACO,UAAU,CAACF,GAAG,EAAE,QAAQ,EAAE,KAAK,CAAC;EACtC,IAAI;IACF,IAAIA,GAAG,GAAG,IAAIF,KAAK,CAAC,IAAI,EAAEE,GAAG,CAACG,MAAM,CAAC;EACvC,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,IAAIH,SAAS,EAAE;MACb,OAAO,CAAC,IAAIJ,KAAK,CAACQ,IAAI,CAAC,CAAC,CAAC,EAAE,IAAIR,KAAK,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/C,CAAC,MAAM;MACL,MAAMD,GAAG;IACX;EACF;;EAEA;EACAJ,GAAG,CAACM,IAAI,EAAE;EACV,IAAIC,IAAI,GAAGP,GAAG,CAACO,IAAI,EAAE;EACrBP,GAAG,CAACQ,KAAK,EAAE;;EAEX;EACA,IAAIC,IAAI,GAAG,EAAE;EACbA,IAAI,CAACC,IAAI,CAAC,IAAIb,KAAK,CAACQ,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;EACxCE,IAAI,CAACC,IAAI,CAAC,IAAIb,KAAK,CAACQ,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;EAExC,OAAOE,IAAI;AACb;AAAC;AACDV,SAAS,CAACY,MAAM,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC;AACvCC,MAAM,CAACC,OAAO,GAAGd,SAAS"},"metadata":{},"sourceType":"script"}