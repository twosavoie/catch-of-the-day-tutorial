{"ast":null,"code":"var utils = require('../utils'),\n  nodes = require('../nodes');\n\n/**\n * Return a `RGBA` from the r,g,b,a channels.\n *\n * Examples:\n *\n *    rgba(255,0,0,0.5)\n *    // => rgba(255,0,0,0.5)\n *\n *    rgba(255,0,0,1)\n *    // => #ff0000\n *\n *    rgba(#ffcc00, 50%)\n *    // rgba(255,204,0,0.5)\n *\n * @param {Unit|RGBA|HSLA} red\n * @param {Unit} green\n * @param {Unit} blue\n * @param {Unit} alpha\n * @return {RGBA}\n * @api public\n */\n\nfunction rgba(red, green, blue, alpha) {\n  switch (arguments.length) {\n    case 1:\n      utils.assertColor(red);\n      return red.rgba;\n    case 2:\n      utils.assertColor(red);\n      var color = red.rgba;\n      utils.assertType(green, 'unit', 'alpha');\n      alpha = green.clone();\n      if ('%' == alpha.type) alpha.val /= 100;\n      return new nodes.RGBA(color.r, color.g, color.b, alpha.val);\n    default:\n      utils.assertType(red, 'unit', 'red');\n      utils.assertType(green, 'unit', 'green');\n      utils.assertType(blue, 'unit', 'blue');\n      utils.assertType(alpha, 'unit', 'alpha');\n      var r = '%' == red.type ? Math.round(red.val * 2.55) : red.val,\n        g = '%' == green.type ? Math.round(green.val * 2.55) : green.val,\n        b = '%' == blue.type ? Math.round(blue.val * 2.55) : blue.val;\n      alpha = alpha.clone();\n      if (alpha && '%' == alpha.type) alpha.val /= 100;\n      return new nodes.RGBA(r, g, b, alpha.val);\n  }\n}\nrgba.params = ['red', 'green', 'blue', 'alpha'];\nmodule.exports = rgba;","map":{"version":3,"names":["utils","require","nodes","rgba","red","green","blue","alpha","arguments","length","assertColor","color","assertType","clone","type","val","RGBA","r","g","b","Math","round","params","module","exports"],"sources":["/Users/lisasavoie/Desktop/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/stylus/lib/functions/rgba.js"],"sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Return a `RGBA` from the r,g,b,a channels.\n *\n * Examples:\n *\n *    rgba(255,0,0,0.5)\n *    // => rgba(255,0,0,0.5)\n *\n *    rgba(255,0,0,1)\n *    // => #ff0000\n *\n *    rgba(#ffcc00, 50%)\n *    // rgba(255,204,0,0.5)\n *\n * @param {Unit|RGBA|HSLA} red\n * @param {Unit} green\n * @param {Unit} blue\n * @param {Unit} alpha\n * @return {RGBA}\n * @api public\n */\n\nfunction rgba(red, green, blue, alpha){\n  switch (arguments.length) {\n    case 1:\n      utils.assertColor(red);\n      return red.rgba;\n    case 2:\n      utils.assertColor(red);\n      var color = red.rgba;\n      utils.assertType(green, 'unit', 'alpha');\n      alpha = green.clone();\n      if ('%' == alpha.type) alpha.val /= 100;\n      return new nodes.RGBA(\n          color.r\n        , color.g\n        , color.b\n        , alpha.val);\n    default:\n      utils.assertType(red, 'unit', 'red');\n      utils.assertType(green, 'unit', 'green');\n      utils.assertType(blue, 'unit', 'blue');\n      utils.assertType(alpha, 'unit', 'alpha');\n      var r = '%' == red.type ? Math.round(red.val * 2.55) : red.val\n        , g = '%' == green.type ? Math.round(green.val * 2.55) : green.val\n        , b = '%' == blue.type ? Math.round(blue.val * 2.55) : blue.val;\n\n      alpha = alpha.clone();\n      if (alpha && '%' == alpha.type) alpha.val /= 100;\n      return new nodes.RGBA(\n          r\n        , g\n        , b\n        , alpha.val);\n  }\n}\nrgba.params = ['red', 'green', 'blue', 'alpha'];\nmodule.exports = rgba;\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAU,CAAC;EAC3BC,KAAK,GAAGD,OAAO,CAAC,UAAU,CAAC;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASE,IAAI,CAACC,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAC;EACpC,QAAQC,SAAS,CAACC,MAAM;IACtB,KAAK,CAAC;MACJT,KAAK,CAACU,WAAW,CAACN,GAAG,CAAC;MACtB,OAAOA,GAAG,CAACD,IAAI;IACjB,KAAK,CAAC;MACJH,KAAK,CAACU,WAAW,CAACN,GAAG,CAAC;MACtB,IAAIO,KAAK,GAAGP,GAAG,CAACD,IAAI;MACpBH,KAAK,CAACY,UAAU,CAACP,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC;MACxCE,KAAK,GAAGF,KAAK,CAACQ,KAAK,EAAE;MACrB,IAAI,GAAG,IAAIN,KAAK,CAACO,IAAI,EAAEP,KAAK,CAACQ,GAAG,IAAI,GAAG;MACvC,OAAO,IAAIb,KAAK,CAACc,IAAI,CACjBL,KAAK,CAACM,CAAC,EACPN,KAAK,CAACO,CAAC,EACPP,KAAK,CAACQ,CAAC,EACPZ,KAAK,CAACQ,GAAG,CAAC;IAChB;MACEf,KAAK,CAACY,UAAU,CAACR,GAAG,EAAE,MAAM,EAAE,KAAK,CAAC;MACpCJ,KAAK,CAACY,UAAU,CAACP,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC;MACxCL,KAAK,CAACY,UAAU,CAACN,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC;MACtCN,KAAK,CAACY,UAAU,CAACL,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC;MACxC,IAAIU,CAAC,GAAG,GAAG,IAAIb,GAAG,CAACU,IAAI,GAAGM,IAAI,CAACC,KAAK,CAACjB,GAAG,CAACW,GAAG,GAAG,IAAI,CAAC,GAAGX,GAAG,CAACW,GAAG;QAC1DG,CAAC,GAAG,GAAG,IAAIb,KAAK,CAACS,IAAI,GAAGM,IAAI,CAACC,KAAK,CAAChB,KAAK,CAACU,GAAG,GAAG,IAAI,CAAC,GAAGV,KAAK,CAACU,GAAG;QAChEI,CAAC,GAAG,GAAG,IAAIb,IAAI,CAACQ,IAAI,GAAGM,IAAI,CAACC,KAAK,CAACf,IAAI,CAACS,GAAG,GAAG,IAAI,CAAC,GAAGT,IAAI,CAACS,GAAG;MAEjER,KAAK,GAAGA,KAAK,CAACM,KAAK,EAAE;MACrB,IAAIN,KAAK,IAAI,GAAG,IAAIA,KAAK,CAACO,IAAI,EAAEP,KAAK,CAACQ,GAAG,IAAI,GAAG;MAChD,OAAO,IAAIb,KAAK,CAACc,IAAI,CACjBC,CAAC,EACDC,CAAC,EACDC,CAAC,EACDZ,KAAK,CAACQ,GAAG,CAAC;EAAC;AAErB;AACAZ,IAAI,CAACmB,MAAM,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC;AAC/CC,MAAM,CAACC,OAAO,GAAGrB,IAAI"},"metadata":{},"sourceType":"script"}