{"ast":null,"code":"/*!\n * Stylus - plugin - url\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Compiler = require('../visitor/compiler'),\n  events = require('../renderer').events,\n  nodes = require('../nodes'),\n  parse = require('url').parse,\n  extname = require('path').extname,\n  utils = require('../utils'),\n  fs = require('fs');\n\n/**\n * Mime table.\n */\n\nvar defaultMimes = {\n  '.gif': 'image/gif',\n  '.png': 'image/png',\n  '.jpg': 'image/jpeg',\n  '.jpeg': 'image/jpeg',\n  '.svg': 'image/svg+xml',\n  '.webp': 'image/webp',\n  '.ttf': 'application/x-font-ttf',\n  '.eot': 'application/vnd.ms-fontobject',\n  '.woff': 'application/font-woff',\n  '.woff2': 'application/font-woff2'\n};\n\n/**\n * Supported encoding types\n */\nvar encodingTypes = {\n  BASE_64: 'base64',\n  UTF8: 'charset=utf-8'\n};\n\n/**\n * Return a url() function with the given `options`.\n *\n * Options:\n *\n *    - `limit` bytesize limit defaulting to 30Kb\n *    - `paths` image resolution path(s), merged with general lookup paths\n *\n * Examples:\n *\n *    stylus(str)\n *      .set('filename', __dirname + '/css/test.styl')\n *      .define('url', stylus.url({ paths: [__dirname + '/public'] }))\n *      .render(function(err, css) { ... })\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function (options) {\n  options = options || {};\n  var _paths = options.paths || [];\n  var sizeLimit = null != options.limit ? options.limit : 30000;\n  var mimes = options.mimes || defaultMimes;\n\n  /**\n   * @param {object} url - The path to the image you want to encode.\n   * @param {object} enc - The encoding for the image. Defaults to base64, the \n   * other valid option is `utf8`.\n   */\n  function fn(url, enc) {\n    // Compile the url\n    var compiler = new Compiler(url),\n      encoding = encodingTypes.BASE_64;\n    compiler.isURL = true;\n    url = url.nodes.map(function (node) {\n      return compiler.visit(node);\n    }).join('');\n\n    // Parse literal\n    url = parse(url);\n    var ext = extname(url.pathname),\n      mime = mimes[ext],\n      hash = url.hash || '',\n      literal = new nodes.Literal('url(\"' + url.href + '\")'),\n      paths = _paths.concat(this.paths),\n      buf,\n      result;\n\n    // Not supported\n    if (!mime) return literal;\n\n    // Absolute\n    if (url.protocol) return literal;\n\n    // Lookup\n    var found = utils.lookup(url.pathname, paths);\n\n    // Failed to lookup\n    if (!found) {\n      events.emit('file not found', 'File ' + literal + ' could not be found, literal url retained!');\n      return literal;\n    }\n\n    // Read data\n    buf = fs.readFileSync(found);\n\n    // Too large\n    if (false !== sizeLimit && buf.length > sizeLimit) return literal;\n    if (enc && 'utf8' == enc.first.val.toLowerCase()) {\n      encoding = encodingTypes.UTF8;\n      result = buf.toString().replace(/\\s+/g, ' ').replace(/[{}\\|\\\\\\^~\\[\\]`\"<>#%]/g, function (match) {\n        return '%' + match[0].charCodeAt(0).toString(16).toUpperCase();\n      }).trim();\n    } else {\n      result = buf.toString(encoding) + hash;\n    }\n\n    // Encode\n    return new nodes.Literal('url(\"data:' + mime + ';' + encoding + ',' + result + '\")');\n  }\n  ;\n  fn.raw = true;\n  return fn;\n};\n\n// Exporting default mimes so we could easily access them\nmodule.exports.mimes = defaultMimes;","map":{"version":3,"names":["Compiler","require","events","nodes","parse","extname","utils","fs","defaultMimes","encodingTypes","BASE_64","UTF8","module","exports","options","_paths","paths","sizeLimit","limit","mimes","fn","url","enc","compiler","encoding","isURL","map","node","visit","join","ext","pathname","mime","hash","literal","Literal","href","concat","buf","result","protocol","found","lookup","emit","readFileSync","length","first","val","toLowerCase","toString","replace","match","charCodeAt","toUpperCase","trim","raw"],"sources":["/Users/lisasavoie/Desktop/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/stylus/lib/functions/url.js"],"sourcesContent":["\n/*!\n * Stylus - plugin - url\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Compiler = require('../visitor/compiler')\n  , events = require('../renderer').events\n  , nodes = require('../nodes')\n  , parse = require('url').parse\n  , extname = require('path').extname\n  , utils = require('../utils')\n  , fs = require('fs');\n\n/**\n * Mime table.\n */\n\nvar defaultMimes = {\n    '.gif': 'image/gif'\n  , '.png': 'image/png'\n  , '.jpg': 'image/jpeg'\n  , '.jpeg': 'image/jpeg'\n  , '.svg': 'image/svg+xml'\n  , '.webp': 'image/webp'\n  , '.ttf': 'application/x-font-ttf'\n  , '.eot': 'application/vnd.ms-fontobject'\n  , '.woff': 'application/font-woff'\n  , '.woff2': 'application/font-woff2'\n};\n\n/**\n * Supported encoding types\n */\nvar encodingTypes = {\n  BASE_64: 'base64',\n  UTF8: 'charset=utf-8'\n}\n\n/**\n * Return a url() function with the given `options`.\n *\n * Options:\n *\n *    - `limit` bytesize limit defaulting to 30Kb\n *    - `paths` image resolution path(s), merged with general lookup paths\n *\n * Examples:\n *\n *    stylus(str)\n *      .set('filename', __dirname + '/css/test.styl')\n *      .define('url', stylus.url({ paths: [__dirname + '/public'] }))\n *      .render(function(err, css) { ... })\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(options) {\n  options = options || {};\n\n  var _paths = options.paths || [];\n  var sizeLimit = null != options.limit ? options.limit : 30000;\n  var mimes = options.mimes || defaultMimes;\n\n  /**\n   * @param {object} url - The path to the image you want to encode.\n   * @param {object} enc - The encoding for the image. Defaults to base64, the \n   * other valid option is `utf8`.\n   */\n  function fn(url, enc) {\n    // Compile the url\n    var compiler = new Compiler(url)\n      , encoding = encodingTypes.BASE_64;\n\n    compiler.isURL = true;\n    url = url.nodes.map(function(node) {\n      return compiler.visit(node);\n    }).join('');\n\n    // Parse literal\n    url = parse(url);\n    var ext = extname(url.pathname)\n      , mime = mimes[ext]\n      , hash = url.hash || ''\n      , literal = new nodes.Literal('url(\"' + url.href + '\")')\n      , paths = _paths.concat(this.paths)\n      , buf\n      , result;\n\n    // Not supported\n    if(!mime) return literal;\n\n    // Absolute\n    if(url.protocol) return literal;\n\n    // Lookup\n    var found = utils.lookup(url.pathname, paths);\n\n    // Failed to lookup\n    if(!found) {\n      events.emit(\n          'file not found'\n        , 'File ' + literal + ' could not be found, literal url retained!'\n      );\n\n      return literal;\n    }\n\n    // Read data\n    buf = fs.readFileSync(found);\n\n    // Too large\n    if(false !== sizeLimit && buf.length > sizeLimit) return literal;\n\n    if(enc && 'utf8' == enc.first.val.toLowerCase()) {\n      encoding = encodingTypes.UTF8;\n      result = buf.toString().replace(/\\s+/g, ' ')\n        .replace(/[{}\\|\\\\\\^~\\[\\]`\"<>#%]/g, function(match) {\n          return '%' + match[0].charCodeAt(0).toString(16).toUpperCase();\n        }).trim();\n    } else {\n      result = buf.toString(encoding) + hash;\n    }\n\n    // Encode\n    return new nodes.Literal('url(\"data:' + mime + ';' +  encoding + ',' + result + '\")');\n  };\n\n  fn.raw = true;\n  return fn;\n};\n\n// Exporting default mimes so we could easily access them\nmodule.exports.mimes = defaultMimes;\n\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAqB,CAAC;EACzCC,MAAM,GAAGD,OAAO,CAAC,aAAa,CAAC,CAACC,MAAM;EACtCC,KAAK,GAAGF,OAAO,CAAC,UAAU,CAAC;EAC3BG,KAAK,GAAGH,OAAO,CAAC,KAAK,CAAC,CAACG,KAAK;EAC5BC,OAAO,GAAGJ,OAAO,CAAC,MAAM,CAAC,CAACI,OAAO;EACjCC,KAAK,GAAGL,OAAO,CAAC,UAAU,CAAC;EAC3BM,EAAE,GAAGN,OAAO,CAAC,IAAI,CAAC;;AAEtB;AACA;AACA;;AAEA,IAAIO,YAAY,GAAG;EACf,MAAM,EAAE,WAAW;EACnB,MAAM,EAAE,WAAW;EACnB,MAAM,EAAE,YAAY;EACpB,OAAO,EAAE,YAAY;EACrB,MAAM,EAAE,eAAe;EACvB,OAAO,EAAE,YAAY;EACrB,MAAM,EAAE,wBAAwB;EAChC,MAAM,EAAE,+BAA+B;EACvC,OAAO,EAAE,uBAAuB;EAChC,QAAQ,EAAE;AACd,CAAC;;AAED;AACA;AACA;AACA,IAAIC,aAAa,GAAG;EAClBC,OAAO,EAAE,QAAQ;EACjBC,IAAI,EAAE;AACR,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG,UAASC,OAAO,EAAE;EACjCA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvB,IAAIC,MAAM,GAAGD,OAAO,CAACE,KAAK,IAAI,EAAE;EAChC,IAAIC,SAAS,GAAG,IAAI,IAAIH,OAAO,CAACI,KAAK,GAAGJ,OAAO,CAACI,KAAK,GAAG,KAAK;EAC7D,IAAIC,KAAK,GAAGL,OAAO,CAACK,KAAK,IAAIX,YAAY;;EAEzC;AACF;AACA;AACA;AACA;EACE,SAASY,EAAE,CAACC,GAAG,EAAEC,GAAG,EAAE;IACpB;IACA,IAAIC,QAAQ,GAAG,IAAIvB,QAAQ,CAACqB,GAAG,CAAC;MAC5BG,QAAQ,GAAGf,aAAa,CAACC,OAAO;IAEpCa,QAAQ,CAACE,KAAK,GAAG,IAAI;IACrBJ,GAAG,GAAGA,GAAG,CAAClB,KAAK,CAACuB,GAAG,CAAC,UAASC,IAAI,EAAE;MACjC,OAAOJ,QAAQ,CAACK,KAAK,CAACD,IAAI,CAAC;IAC7B,CAAC,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;;IAEX;IACAR,GAAG,GAAGjB,KAAK,CAACiB,GAAG,CAAC;IAChB,IAAIS,GAAG,GAAGzB,OAAO,CAACgB,GAAG,CAACU,QAAQ,CAAC;MAC3BC,IAAI,GAAGb,KAAK,CAACW,GAAG,CAAC;MACjBG,IAAI,GAAGZ,GAAG,CAACY,IAAI,IAAI,EAAE;MACrBC,OAAO,GAAG,IAAI/B,KAAK,CAACgC,OAAO,CAAC,OAAO,GAAGd,GAAG,CAACe,IAAI,GAAG,IAAI,CAAC;MACtDpB,KAAK,GAAGD,MAAM,CAACsB,MAAM,CAAC,IAAI,CAACrB,KAAK,CAAC;MACjCsB,GAAG;MACHC,MAAM;;IAEV;IACA,IAAG,CAACP,IAAI,EAAE,OAAOE,OAAO;;IAExB;IACA,IAAGb,GAAG,CAACmB,QAAQ,EAAE,OAAON,OAAO;;IAE/B;IACA,IAAIO,KAAK,GAAGnC,KAAK,CAACoC,MAAM,CAACrB,GAAG,CAACU,QAAQ,EAAEf,KAAK,CAAC;;IAE7C;IACA,IAAG,CAACyB,KAAK,EAAE;MACTvC,MAAM,CAACyC,IAAI,CACP,gBAAgB,EAChB,OAAO,GAAGT,OAAO,GAAG,4CAA4C,CACnE;MAED,OAAOA,OAAO;IAChB;;IAEA;IACAI,GAAG,GAAG/B,EAAE,CAACqC,YAAY,CAACH,KAAK,CAAC;;IAE5B;IACA,IAAG,KAAK,KAAKxB,SAAS,IAAIqB,GAAG,CAACO,MAAM,GAAG5B,SAAS,EAAE,OAAOiB,OAAO;IAEhE,IAAGZ,GAAG,IAAI,MAAM,IAAIA,GAAG,CAACwB,KAAK,CAACC,GAAG,CAACC,WAAW,EAAE,EAAE;MAC/CxB,QAAQ,GAAGf,aAAa,CAACE,IAAI;MAC7B4B,MAAM,GAAGD,GAAG,CAACW,QAAQ,EAAE,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACzCA,OAAO,CAAC,wBAAwB,EAAE,UAASC,KAAK,EAAE;QACjD,OAAO,GAAG,GAAGA,KAAK,CAAC,CAAC,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACH,QAAQ,CAAC,EAAE,CAAC,CAACI,WAAW,EAAE;MAChE,CAAC,CAAC,CAACC,IAAI,EAAE;IACb,CAAC,MAAM;MACLf,MAAM,GAAGD,GAAG,CAACW,QAAQ,CAACzB,QAAQ,CAAC,GAAGS,IAAI;IACxC;;IAEA;IACA,OAAO,IAAI9B,KAAK,CAACgC,OAAO,CAAC,YAAY,GAAGH,IAAI,GAAG,GAAG,GAAIR,QAAQ,GAAG,GAAG,GAAGe,MAAM,GAAG,IAAI,CAAC;EACvF;EAAC;EAEDnB,EAAE,CAACmC,GAAG,GAAG,IAAI;EACb,OAAOnC,EAAE;AACX,CAAC;;AAED;AACAR,MAAM,CAACC,OAAO,CAACM,KAAK,GAAGX,YAAY"},"metadata":{},"sourceType":"script"}