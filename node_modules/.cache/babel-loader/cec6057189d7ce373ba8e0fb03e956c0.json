{"ast":null,"code":"/*!\n * Stylus - Parser\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Lexer = require('./lexer'),\n  nodes = require('./nodes'),\n  Token = require('./token'),\n  units = require('./units'),\n  errors = require('./errors'),\n  cache = require('./cache');\n\n// debuggers\n\nvar debug = {\n  lexer: require('debug')('stylus:lexer'),\n  selector: require('debug')('stylus:parser:selector')\n};\n\n/**\n * Selector composite tokens.\n */\n\nvar selectorTokens = ['ident', 'string', 'selector', 'function', 'comment', 'boolean', 'space', 'color', 'unit', 'for', 'in', '[', ']', '(', ')', '+', '-', '*', '*=', '<', '>', '=', ':', '&', '&&', '~', '{', '}', '.', '..', '/'];\n\n/**\n * CSS pseudo-classes and pseudo-elements.\n * See http://dev.w3.org/csswg/selectors4/\n */\n\nvar pseudoSelectors = [\n// Logical Combinations\n'matches', 'not'\n\n// Linguistic Pseudo-classes\n, 'dir', 'lang'\n\n// Location Pseudo-classes\n, 'any-link', 'link', 'visited', 'local-link', 'target', 'scope'\n\n// User Action Pseudo-classes\n, 'hover', 'active', 'focus', 'drop'\n\n// Time-dimensional Pseudo-classes\n, 'current', 'past', 'future'\n\n// The Input Pseudo-classes\n, 'enabled', 'disabled', 'read-only', 'read-write', 'placeholder-shown', 'checked', 'indeterminate', 'valid', 'invalid', 'in-range', 'out-of-range', 'required', 'optional', 'user-error'\n\n// Tree-Structural pseudo-classes\n, 'root', 'empty', 'blank', 'nth-child', 'nth-last-child', 'first-child', 'last-child', 'only-child', 'nth-of-type', 'nth-last-of-type', 'first-of-type', 'last-of-type', 'only-of-type', 'nth-match', 'nth-last-match'\n\n// Grid-Structural Selectors\n, 'nth-column', 'nth-last-column'\n\n// Pseudo-elements\n, 'first-line', 'first-letter', 'before', 'after'\n\n// Non-standard\n, 'selection'];\n\n/**\n * Initialize a new `Parser` with the given `str` and `options`.\n *\n * @param {String} str\n * @param {Object} options\n * @api private\n */\n\nvar Parser = module.exports = function Parser(str, options) {\n  var self = this;\n  options = options || {};\n  Parser.cache = Parser.cache || Parser.getCache(options);\n  this.hash = Parser.cache.key(str, options);\n  this.lexer = {};\n  if (!Parser.cache.has(this.hash)) {\n    this.lexer = new Lexer(str, options);\n  }\n  this.prefix = options.prefix || '';\n  this.root = options.root || new nodes.Root();\n  this.state = ['root'];\n  this.stash = [];\n  this.parens = 0;\n  this.css = 0;\n  this.state.pop = function () {\n    self.prevState = [].pop.call(this);\n  };\n};\n\n/**\n * Get cache instance.\n *\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\nParser.getCache = function (options) {\n  return false === options.cache ? cache(false) : cache(options.cache || 'memory', options);\n};\n\n/**\n * Parser prototype.\n */\n\nParser.prototype = {\n  /**\n   * Constructor.\n   */\n\n  constructor: Parser,\n  /**\n   * Return current state.\n   *\n   * @return {String}\n   * @api private\n   */\n\n  currentState: function currentState() {\n    return this.state[this.state.length - 1];\n  },\n  /**\n   * Return previous state.\n   *\n   * @return {String}\n   * @api private\n   */\n\n  previousState: function previousState() {\n    return this.state[this.state.length - 2];\n  },\n  /**\n   * Parse the input, then return the root node.\n   *\n   * @return {Node}\n   * @api private\n   */\n\n  parse: function parse() {\n    var block = this.parent = this.root;\n    if (Parser.cache.has(this.hash)) {\n      block = Parser.cache.get(this.hash);\n      // normalize cached imports\n      if ('block' == block.nodeName) block.constructor = nodes.Root;\n    } else {\n      while ('eos' != this.peek().type) {\n        this.skipWhitespace();\n        if ('eos' == this.peek().type) break;\n        var stmt = this.statement();\n        this.accept(';');\n        if (!stmt) this.error('unexpected token {peek}, not allowed at the root level');\n        block.push(stmt);\n      }\n      Parser.cache.set(this.hash, block);\n    }\n    return block;\n  },\n  /**\n   * Throw an `Error` with the given `msg`.\n   *\n   * @param {String} msg\n   * @api private\n   */\n\n  error: function error(msg) {\n    var type = this.peek().type,\n      val = undefined == this.peek().val ? '' : ' ' + this.peek().toString();\n    if (val.trim() == type.trim()) val = '';\n    throw new errors.ParseError(msg.replace('{peek}', '\"' + type + val + '\"'));\n  },\n  /**\n   * Accept the given token `type`, and return it,\n   * otherwise return `undefined`.\n   *\n   * @param {String} type\n   * @return {Token}\n   * @api private\n   */\n\n  accept: function accept(type) {\n    if (type == this.peek().type) {\n      return this.next();\n    }\n  },\n  /**\n   * Expect token `type` and return it, throw otherwise.\n   *\n   * @param {String} type\n   * @return {Token}\n   * @api private\n   */\n\n  expect: function expect(type) {\n    if (type != this.peek().type) {\n      this.error('expected \"' + type + '\", got {peek}');\n    }\n    return this.next();\n  },\n  /**\n   * Get the next token.\n   *\n   * @return {Token}\n   * @api private\n   */\n\n  next: function next() {\n    var tok = this.stash.length ? this.stash.pop() : this.lexer.next(),\n      line = tok.lineno,\n      column = tok.column || 1;\n    if (tok.val && tok.val.nodeName) {\n      tok.val.lineno = line;\n      tok.val.column = column;\n    }\n    nodes.lineno = line;\n    nodes.column = column;\n    debug.lexer('%s %s', tok.type, tok.val || '');\n    return tok;\n  },\n  /**\n   * Peek with lookahead(1).\n   *\n   * @return {Token}\n   * @api private\n   */\n\n  peek: function peek() {\n    return this.lexer.peek();\n  },\n  /**\n   * Lookahead `n` tokens.\n   *\n   * @param {Number} n\n   * @return {Token}\n   * @api private\n   */\n\n  lookahead: function lookahead(n) {\n    return this.lexer.lookahead(n);\n  },\n  /**\n   * Check if the token at `n` is a valid selector token.\n   *\n   * @param {Number} n\n   * @return {Boolean}\n   * @api private\n   */\n\n  isSelectorToken: function isSelectorToken(n) {\n    var la = this.lookahead(n).type;\n    switch (la) {\n      case 'for':\n        return this.bracketed;\n      case '[':\n        this.bracketed = true;\n        return true;\n      case ']':\n        this.bracketed = false;\n        return true;\n      default:\n        return ~selectorTokens.indexOf(la);\n    }\n  },\n  /**\n   * Check if the token at `n` is a pseudo selector.\n   *\n   * @param {Number} n\n   * @return {Boolean}\n   * @api private\n   */\n\n  isPseudoSelector: function isPseudoSelector(n) {\n    var val = this.lookahead(n).val;\n    return val && ~pseudoSelectors.indexOf(val.name);\n  },\n  /**\n   * Check if the current line contains `type`.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   * @api private\n   */\n\n  lineContains: function lineContains(type) {\n    var i = 1,\n      la;\n    while (la = this.lookahead(i++)) {\n      if (~['indent', 'outdent', 'newline', 'eos'].indexOf(la.type)) return;\n      if (type == la.type) return true;\n    }\n  },\n  /**\n   * Valid selector tokens.\n   */\n\n  selectorToken: function selectorToken() {\n    if (this.isSelectorToken(1)) {\n      if ('{' == this.peek().type) {\n        // unclosed, must be a block\n        if (!this.lineContains('}')) return;\n        // check if ':' is within the braces.\n        // though not required by Stylus, chances\n        // are if someone is using {} they will\n        // use CSS-style props, helping us with\n        // the ambiguity in this case\n        var i = 0,\n          la;\n        while (la = this.lookahead(++i)) {\n          if ('}' == la.type) {\n            // Check empty block.\n            if (i == 2 || i == 3 && this.lookahead(i - 1).type == 'space') return;\n            break;\n          }\n          if (':' == la.type) return;\n        }\n      }\n      return this.next();\n    }\n  },\n  /**\n   * Skip the given `tokens`.\n   *\n   * @param {Array} tokens\n   * @api private\n   */\n\n  skip: function skip(tokens) {\n    while (~tokens.indexOf(this.peek().type)) this.next();\n  },\n  /**\n   * Consume whitespace.\n   */\n\n  skipWhitespace: function skipWhitespace() {\n    this.skip(['space', 'indent', 'outdent', 'newline']);\n  },\n  /**\n   * Consume newlines.\n   */\n\n  skipNewlines: function skipNewlines() {\n    while ('newline' == this.peek().type) this.next();\n  },\n  /**\n   * Consume spaces.\n   */\n\n  skipSpaces: function skipSpaces() {\n    while ('space' == this.peek().type) this.next();\n  },\n  /**\n   * Consume spaces and comments.\n   */\n\n  skipSpacesAndComments: function skipSpacesAndComments() {\n    while ('space' == this.peek().type || 'comment' == this.peek().type) this.next();\n  },\n  /**\n   * Check if the following sequence of tokens\n   * forms a function definition, ie trailing\n   * `{` or indentation.\n   */\n\n  looksLikeFunctionDefinition: function looksLikeFunctionDefinition(i) {\n    return 'indent' == this.lookahead(i).type || '{' == this.lookahead(i).type;\n  },\n  /**\n   * Check if the following sequence of tokens\n   * forms a selector.\n   *\n   * @param {Boolean} [fromProperty]\n   * @return {Boolean}\n   * @api private\n   */\n\n  looksLikeSelector: function looksLikeSelector(fromProperty) {\n    var i = 1,\n      node,\n      brace;\n\n    // Real property\n    if (fromProperty && ':' == this.lookahead(i + 1).type && (this.lookahead(i + 1).space || 'indent' == this.lookahead(i + 2).type)) return false;\n\n    // Assume selector when an ident is\n    // followed by a selector\n    while ('ident' == this.lookahead(i).type && ('newline' == this.lookahead(i + 1).type || ',' == this.lookahead(i + 1).type)) i += 2;\n    while (this.isSelectorToken(i) || ',' == this.lookahead(i).type) {\n      if ('selector' == this.lookahead(i).type) return true;\n      if ('&' == this.lookahead(i + 1).type) return true;\n\n      // Hash values inside properties\n      if (i > 1 && 'ident' === this.lookahead(i - 1).type && '.' === this.lookahead(i).type && 'ident' === this.lookahead(i + 1).type) {\n        while (node = this.lookahead(i + 2)) {\n          if (['indent', 'outdent', '{', ';', 'eos', 'selector', 'media', 'if', 'atrule', ')', '}', 'unit', '[', 'for', 'function'].indexOf(node.type) !== -1) {\n            if (node.type === '[') {\n              while ((node = this.lookahead(i + 3)) && node.type !== ']') {\n                if (~['.', 'unit'].indexOf(node.type)) {\n                  return false;\n                }\n                i += 1;\n              }\n            } else {\n              if (this.isPseudoSelector(i + 2)) {\n                return true;\n              }\n              if (node.type === ')' && this.lookahead(i + 3) && this.lookahead(i + 3).type === '}') {\n                break;\n              }\n              return ['outdent', ';', 'eos', 'media', 'if', 'atrule', ')', '}', 'unit', 'for', 'function'].indexOf(node.type) === -1;\n            }\n          }\n          i += 1;\n        }\n        return true;\n      }\n      if ('.' == this.lookahead(i).type && 'ident' == this.lookahead(i + 1).type) {\n        return true;\n      }\n      if ('*' == this.lookahead(i).type && 'newline' == this.lookahead(i + 1).type) return true;\n\n      // Pseudo-elements\n      if (':' == this.lookahead(i).type && ':' == this.lookahead(i + 1).type) return true;\n\n      // #a after an ident and newline\n      if ('color' == this.lookahead(i).type && 'newline' == this.lookahead(i - 1).type) return true;\n      if (this.looksLikeAttributeSelector(i)) return true;\n      if (('=' == this.lookahead(i).type || 'function' == this.lookahead(i).type) && '{' == this.lookahead(i + 1).type) return false;\n\n      // Hash values inside properties\n      if (':' == this.lookahead(i).type && !this.isPseudoSelector(i + 1) && this.lineContains('.')) return false;\n\n      // the ':' token within braces signifies\n      // a selector. ex: \"foo{bar:'baz'}\"\n      if ('{' == this.lookahead(i).type) brace = true;else if ('}' == this.lookahead(i).type) brace = false;\n      if (brace && ':' == this.lookahead(i).type) return true;\n\n      // '{' preceded by a space is considered a selector.\n      // for example \"foo{bar}{baz}\" may be a property,\n      // however \"foo{bar} {baz}\" is a selector\n      if ('space' == this.lookahead(i).type && '{' == this.lookahead(i + 1).type) return true;\n\n      // Assume pseudo selectors are NOT properties\n      // as 'td:th-child(1)' may look like a property\n      // and function call to the parser otherwise\n      if (':' == this.lookahead(i++).type && !this.lookahead(i - 1).space && this.isPseudoSelector(i)) return true;\n\n      // Trailing space\n      if ('space' == this.lookahead(i).type && 'newline' == this.lookahead(i + 1).type && '{' == this.lookahead(i + 2).type) return true;\n      if (',' == this.lookahead(i).type && 'newline' == this.lookahead(i + 1).type) return true;\n    }\n\n    // Trailing comma\n    if (',' == this.lookahead(i).type && 'newline' == this.lookahead(i + 1).type) return true;\n\n    // Trailing brace\n    if ('{' == this.lookahead(i).type && 'newline' == this.lookahead(i + 1).type) return true;\n\n    // css-style mode, false on ; }\n    if (this.css) {\n      if (';' == this.lookahead(i).type || '}' == this.lookahead(i - 1).type) return false;\n    }\n\n    // Trailing separators\n    while (!~['indent', 'outdent', 'newline', 'for', 'if', ';', '}', 'eos'].indexOf(this.lookahead(i).type)) ++i;\n    if ('indent' == this.lookahead(i).type) return true;\n  },\n  /**\n   * Check if the following sequence of tokens\n   * forms an attribute selector.\n   */\n\n  looksLikeAttributeSelector: function looksLikeAttributeSelector(n) {\n    var type = this.lookahead(n).type;\n    if ('=' == type && this.bracketed) return true;\n    return ('ident' == type || 'string' == type) && ']' == this.lookahead(n + 1).type && ('newline' == this.lookahead(n + 2).type || this.isSelectorToken(n + 2)) && !this.lineContains(':') && !this.lineContains('=');\n  },\n  /**\n   * Check if the following sequence of tokens\n   * forms a keyframe block.\n   */\n\n  looksLikeKeyframe: function looksLikeKeyframe() {\n    var i = 2,\n      type;\n    switch (this.lookahead(i).type) {\n      case '{':\n      case 'indent':\n      case ',':\n        return true;\n      case 'newline':\n        while ('unit' == this.lookahead(++i).type || 'newline' == this.lookahead(i).type);\n        type = this.lookahead(i).type;\n        return 'indent' == type || '{' == type;\n    }\n  },\n  /**\n   * Check if the current state supports selectors.\n   */\n\n  stateAllowsSelector: function stateAllowsSelector() {\n    switch (this.currentState()) {\n      case 'root':\n      case 'atblock':\n      case 'selector':\n      case 'conditional':\n      case 'function':\n      case 'atrule':\n      case 'for':\n        return true;\n    }\n  },\n  /**\n   * Try to assign @block to the node.\n   *\n   * @param {Expression} expr\n   * @private\n   */\n\n  assignAtblock: function assignAtblock(expr) {\n    try {\n      expr.push(this.atblock(expr));\n    } catch (err) {\n      this.error('invalid right-hand side operand in assignment, got {peek}');\n    }\n  },\n  /**\n   *   statement\n   * | statement 'if' expression\n   * | statement 'unless' expression\n   */\n\n  statement: function statement() {\n    var stmt = this.stmt(),\n      state = this.prevState,\n      block,\n      op;\n\n    // special-case statements since it\n    // is not an expression. We could\n    // implement postfix conditionals at\n    // the expression level, however they\n    // would then fail to enclose properties\n    if (this.allowPostfix) {\n      this.allowPostfix = false;\n      state = 'expression';\n    }\n    switch (state) {\n      case 'assignment':\n      case 'expression':\n      case 'function arguments':\n        while (op = this.accept('if') || this.accept('unless') || this.accept('for')) {\n          switch (op.type) {\n            case 'if':\n            case 'unless':\n              stmt = new nodes.If(this.expression(), stmt);\n              stmt.postfix = true;\n              stmt.negate = 'unless' == op.type;\n              this.accept(';');\n              break;\n            case 'for':\n              var key,\n                val = this.id().name;\n              if (this.accept(',')) key = this.id().name;\n              this.expect('in');\n              var each = new nodes.Each(val, key, this.expression());\n              block = new nodes.Block(this.parent, each);\n              block.push(stmt);\n              each.block = block;\n              stmt = each;\n          }\n        }\n    }\n    return stmt;\n  },\n  /**\n   *    ident\n   *  | selector\n   *  | literal\n   *  | charset\n   *  | namespace\n   *  | import\n   *  | require\n   *  | media\n   *  | atrule\n   *  | scope\n   *  | keyframes\n   *  | mozdocument\n   *  | for\n   *  | if\n   *  | unless\n   *  | comment\n   *  | expression\n   *  | 'return' expression\n   */\n\n  stmt: function stmt() {\n    var tok = this.peek(),\n      selector;\n    switch (tok.type) {\n      case 'keyframes':\n        return this.keyframes();\n      case '-moz-document':\n        return this.mozdocument();\n      case 'comment':\n      case 'selector':\n      case 'literal':\n      case 'charset':\n      case 'namespace':\n      case 'import':\n      case 'require':\n      case 'extend':\n      case 'media':\n      case 'atrule':\n      case 'ident':\n      case 'scope':\n      case 'supports':\n      case 'unless':\n      case 'function':\n      case 'for':\n      case 'if':\n        return this[tok.type]();\n      case 'return':\n        return this.return();\n      case '{':\n        return this.property();\n      default:\n        // Contextual selectors\n        if (this.stateAllowsSelector()) {\n          switch (tok.type) {\n            case 'color':\n            case '~':\n            case '>':\n            case '<':\n            case ':':\n            case '&':\n            case '&&':\n            case '[':\n            case '.':\n            case '/':\n              selector = this.selector();\n              selector.column = tok.column;\n              selector.lineno = tok.lineno;\n              return selector;\n            // relative reference\n            case '..':\n              if ('/' == this.lookahead(2).type) return this.selector();\n            case '+':\n              return 'function' == this.lookahead(2).type ? this.functionCall() : this.selector();\n            case '*':\n              return this.property();\n            // keyframe blocks (10%, 20% { ... })\n            case 'unit':\n              if (this.looksLikeKeyframe()) {\n                selector = this.selector();\n                selector.column = tok.column;\n                selector.lineno = tok.lineno;\n                return selector;\n              }\n            case '-':\n              if ('{' == this.lookahead(2).type) return this.property();\n          }\n        }\n\n        // Expression fallback\n        var expr = this.expression();\n        if (expr.isEmpty) this.error('unexpected {peek}');\n        return expr;\n    }\n  },\n  /**\n   * indent (!outdent)+ outdent\n   */\n\n  block: function block(node, scope) {\n    var delim,\n      stmt,\n      next,\n      block = this.parent = new nodes.Block(this.parent, node);\n    if (false === scope) block.scope = false;\n    this.accept('newline');\n\n    // css-style\n    if (this.accept('{')) {\n      this.css++;\n      delim = '}';\n      this.skipWhitespace();\n    } else {\n      delim = 'outdent';\n      this.expect('indent');\n    }\n    while (delim != this.peek().type) {\n      // css-style\n      if (this.css) {\n        if (this.accept('newline') || this.accept('indent')) continue;\n        stmt = this.statement();\n        this.accept(';');\n        this.skipWhitespace();\n      } else {\n        if (this.accept('newline')) continue;\n        // skip useless indents and comments\n        next = this.lookahead(2).type;\n        if ('indent' == this.peek().type && ~['outdent', 'newline', 'comment'].indexOf(next)) {\n          this.skip(['indent', 'outdent']);\n          continue;\n        }\n        if ('eos' == this.peek().type) return block;\n        stmt = this.statement();\n        this.accept(';');\n      }\n      if (!stmt) this.error('unexpected token {peek} in block');\n      block.push(stmt);\n    }\n\n    // css-style\n    if (this.css) {\n      this.skipWhitespace();\n      this.expect('}');\n      this.skipSpaces();\n      this.css--;\n    } else {\n      this.expect('outdent');\n    }\n    this.parent = block.parent;\n    return block;\n  },\n  /**\n   * comment space*\n   */\n\n  comment: function comment() {\n    var node = this.next().val;\n    this.skipSpaces();\n    return node;\n  },\n  /**\n   * for val (',' key) in expr\n   */\n\n  for: function _for() {\n    this.expect('for');\n    var key,\n      val = this.id().name;\n    if (this.accept(',')) key = this.id().name;\n    this.expect('in');\n    this.state.push('for');\n    this.cond = true;\n    var each = new nodes.Each(val, key, this.expression());\n    this.cond = false;\n    each.block = this.block(each, false);\n    this.state.pop();\n    return each;\n  },\n  /**\n   * return expression\n   */\n\n  return: function _return() {\n    this.expect('return');\n    var expr = this.expression();\n    return expr.isEmpty ? new nodes.Return() : new nodes.Return(expr);\n  },\n  /**\n   * unless expression block\n   */\n\n  unless: function unless() {\n    this.expect('unless');\n    this.state.push('conditional');\n    this.cond = true;\n    var node = new nodes.If(this.expression(), true);\n    this.cond = false;\n    node.block = this.block(node, false);\n    this.state.pop();\n    return node;\n  },\n  /**\n   * if expression block (else block)?\n   */\n\n  if: function _if() {\n    var token = this.expect('if');\n    this.state.push('conditional');\n    this.cond = true;\n    var node = new nodes.If(this.expression()),\n      cond,\n      block,\n      item;\n    node.column = token.column;\n    this.cond = false;\n    node.block = this.block(node, false);\n    this.skip(['newline', 'comment']);\n    while (this.accept('else')) {\n      token = this.accept('if');\n      if (token) {\n        this.cond = true;\n        cond = this.expression();\n        this.cond = false;\n        block = this.block(node, false);\n        item = new nodes.If(cond, block);\n        item.column = token.column;\n        node.elses.push(item);\n      } else {\n        node.elses.push(this.block(node, false));\n        break;\n      }\n      this.skip(['newline', 'comment']);\n    }\n    this.state.pop();\n    return node;\n  },\n  /**\n   * @block\n   *\n   * @param {Expression} [node]\n   */\n\n  atblock: function atblock(node) {\n    if (!node) this.expect('atblock');\n    node = new nodes.Atblock();\n    this.state.push('atblock');\n    node.block = this.block(node, false);\n    this.state.pop();\n    return node;\n  },\n  /**\n   * atrule selector? block?\n   */\n\n  atrule: function atrule() {\n    var type = this.expect('atrule').val,\n      node = new nodes.Atrule(type),\n      tok;\n    this.skipSpacesAndComments();\n    node.segments = this.selectorParts();\n    this.skipSpacesAndComments();\n    tok = this.peek().type;\n    if ('indent' == tok || '{' == tok || 'newline' == tok && '{' == this.lookahead(2).type) {\n      this.state.push('atrule');\n      node.block = this.block(node);\n      this.state.pop();\n    }\n    return node;\n  },\n  /**\n   * scope\n   */\n\n  scope: function scope() {\n    this.expect('scope');\n    var selector = this.selectorParts().map(function (selector) {\n      return selector.val;\n    }).join('');\n    this.selectorScope = selector.trim();\n    return nodes.null;\n  },\n  /**\n   * supports\n   */\n\n  supports: function supports() {\n    this.expect('supports');\n    var node = new nodes.Supports(this.supportsCondition());\n    this.state.push('atrule');\n    node.block = this.block(node);\n    this.state.pop();\n    return node;\n  },\n  /**\n   *   supports negation\n   * | supports op\n   * | expression\n   */\n\n  supportsCondition: function supportsCondition() {\n    var node = this.supportsNegation() || this.supportsOp();\n    if (!node) {\n      this.cond = true;\n      node = this.expression();\n      this.cond = false;\n    }\n    return node;\n  },\n  /**\n   * 'not' supports feature\n   */\n\n  supportsNegation: function supportsNegation() {\n    if (this.accept('not')) {\n      var node = new nodes.Expression();\n      node.push(new nodes.Literal('not'));\n      node.push(this.supportsFeature());\n      return node;\n    }\n  },\n  /**\n   * supports feature (('and' | 'or') supports feature)+\n   */\n\n  supportsOp: function supportsOp() {\n    var feature = this.supportsFeature(),\n      op,\n      expr;\n    if (feature) {\n      expr = new nodes.Expression();\n      expr.push(feature);\n      while (op = this.accept('&&') || this.accept('||')) {\n        expr.push(new nodes.Literal('&&' == op.val ? 'and' : 'or'));\n        expr.push(this.supportsFeature());\n      }\n      return expr;\n    }\n  },\n  /**\n   *   ('(' supports condition ')')\n   * | feature\n   */\n\n  supportsFeature: function supportsFeature() {\n    this.skipSpacesAndComments();\n    if ('(' == this.peek().type) {\n      var la = this.lookahead(2).type;\n      if ('ident' == la || '{' == la) {\n        return this.feature();\n      } else {\n        this.expect('(');\n        var node = new nodes.Expression();\n        node.push(new nodes.Literal('('));\n        node.push(this.supportsCondition());\n        this.expect(')');\n        node.push(new nodes.Literal(')'));\n        this.skipSpacesAndComments();\n        return node;\n      }\n    }\n  },\n  /**\n   * extend\n   */\n\n  extend: function extend() {\n    var tok = this.expect('extend'),\n      selectors = [],\n      sel,\n      node,\n      arr;\n    do {\n      arr = this.selectorParts();\n      if (!arr.length) continue;\n      sel = new nodes.Selector(arr);\n      selectors.push(sel);\n      if ('!' !== this.peek().type) continue;\n      tok = this.lookahead(2);\n      if ('ident' !== tok.type || 'optional' !== tok.val.name) continue;\n      this.skip(['!', 'ident']);\n      sel.optional = true;\n    } while (this.accept(','));\n    node = new nodes.Extend(selectors);\n    node.lineno = tok.lineno;\n    node.column = tok.column;\n    return node;\n  },\n  /**\n   * media queries\n   */\n\n  media: function media() {\n    this.expect('media');\n    this.state.push('atrule');\n    var media = new nodes.Media(this.queries());\n    media.block = this.block(media);\n    this.state.pop();\n    return media;\n  },\n  /**\n   * query (',' query)*\n   */\n\n  queries: function queries() {\n    var queries = new nodes.QueryList(),\n      skip = ['comment', 'newline', 'space'];\n    do {\n      this.skip(skip);\n      queries.push(this.query());\n      this.skip(skip);\n    } while (this.accept(','));\n    return queries;\n  },\n  /**\n   *   expression\n   * | (ident | 'not')? ident ('and' feature)*\n   * | feature ('and' feature)*\n   */\n\n  query: function query() {\n    var query = new nodes.Query(),\n      expr,\n      pred,\n      id;\n\n    // hash values support\n    if ('ident' == this.peek().type && ('.' == this.lookahead(2).type || '[' == this.lookahead(2).type)) {\n      this.cond = true;\n      expr = this.expression();\n      this.cond = false;\n      query.push(new nodes.Feature(expr.nodes));\n      return query;\n    }\n    if (pred = this.accept('ident') || this.accept('not')) {\n      pred = new nodes.Literal(pred.val.string || pred.val);\n      this.skipSpacesAndComments();\n      if (id = this.accept('ident')) {\n        query.type = id.val;\n        query.predicate = pred;\n      } else {\n        query.type = pred;\n      }\n      this.skipSpacesAndComments();\n      if (!this.accept('&&')) return query;\n    }\n    do {\n      query.push(this.feature());\n    } while (this.accept('&&'));\n    return query;\n  },\n  /**\n   * '(' ident ( ':'? expression )? ')'\n   */\n\n  feature: function feature() {\n    this.skipSpacesAndComments();\n    this.expect('(');\n    this.skipSpacesAndComments();\n    var node = new nodes.Feature(this.interpolate());\n    this.skipSpacesAndComments();\n    this.accept(':');\n    this.skipSpacesAndComments();\n    this.inProperty = true;\n    node.expr = this.list();\n    this.inProperty = false;\n    this.skipSpacesAndComments();\n    this.expect(')');\n    this.skipSpacesAndComments();\n    return node;\n  },\n  /**\n   * @-moz-document call (',' call)* block\n   */\n\n  mozdocument: function mozdocument() {\n    this.expect('-moz-document');\n    var mozdocument = new nodes.Atrule('-moz-document'),\n      calls = [];\n    do {\n      this.skipSpacesAndComments();\n      calls.push(this.functionCall());\n      this.skipSpacesAndComments();\n    } while (this.accept(','));\n    mozdocument.segments = [new nodes.Literal(calls.join(', '))];\n    this.state.push('atrule');\n    mozdocument.block = this.block(mozdocument, false);\n    this.state.pop();\n    return mozdocument;\n  },\n  /**\n   * import expression\n   */\n\n  import: function _import() {\n    this.expect('import');\n    this.allowPostfix = true;\n    return new nodes.Import(this.expression(), false);\n  },\n  /**\n   * require expression\n   */\n\n  require: function require() {\n    this.expect('require');\n    this.allowPostfix = true;\n    return new nodes.Import(this.expression(), true);\n  },\n  /**\n   * charset string\n   */\n\n  charset: function charset() {\n    this.expect('charset');\n    var str = this.expect('string').val;\n    this.allowPostfix = true;\n    return new nodes.Charset(str);\n  },\n  /**\n   * namespace ident? (string | url)\n   */\n\n  namespace: function namespace() {\n    var str, prefix;\n    this.expect('namespace');\n    this.skipSpacesAndComments();\n    if (prefix = this.accept('ident')) {\n      prefix = prefix.val;\n    }\n    this.skipSpacesAndComments();\n    str = this.accept('string') || this.url();\n    this.allowPostfix = true;\n    return new nodes.Namespace(str, prefix);\n  },\n  /**\n   * keyframes name block\n   */\n\n  keyframes: function keyframes() {\n    var tok = this.expect('keyframes'),\n      keyframes;\n    this.skipSpacesAndComments();\n    keyframes = new nodes.Keyframes(this.selectorParts(), tok.val);\n    keyframes.column = tok.column;\n    this.skipSpacesAndComments();\n\n    // block\n    this.state.push('atrule');\n    keyframes.block = this.block(keyframes);\n    this.state.pop();\n    return keyframes;\n  },\n  /**\n   * literal\n   */\n\n  literal: function literal() {\n    return this.expect('literal').val;\n  },\n  /**\n   * ident space?\n   */\n\n  id: function id() {\n    var tok = this.expect('ident');\n    this.accept('space');\n    return tok.val;\n  },\n  /**\n   *   ident\n   * | assignment\n   * | property\n   * | selector\n   */\n\n  ident: function ident() {\n    var i = 2,\n      la = this.lookahead(i).type;\n    while ('space' == la) la = this.lookahead(++i).type;\n    switch (la) {\n      // Assignment\n      case '=':\n      case '?=':\n      case '-=':\n      case '+=':\n      case '*=':\n      case '/=':\n      case '%=':\n        return this.assignment();\n      // Member\n      case '.':\n        if ('space' == this.lookahead(i - 1).type) return this.selector();\n        if (this._ident == this.peek()) return this.id();\n        while ('=' != this.lookahead(++i).type && !~['[', ',', 'newline', 'indent', 'eos'].indexOf(this.lookahead(i).type));\n        if ('=' == this.lookahead(i).type) {\n          this._ident = this.peek();\n          return this.expression();\n        } else if (this.looksLikeSelector() && this.stateAllowsSelector()) {\n          return this.selector();\n        }\n      // Assignment []=\n      case '[':\n        if (this._ident == this.peek()) return this.id();\n        while (']' != this.lookahead(i++).type && 'selector' != this.lookahead(i).type && 'eos' != this.lookahead(i).type);\n        if ('=' == this.lookahead(i).type) {\n          this._ident = this.peek();\n          return this.expression();\n        } else if (this.looksLikeSelector() && this.stateAllowsSelector()) {\n          return this.selector();\n        }\n      // Operation\n      case '-':\n      case '+':\n      case '/':\n      case '*':\n      case '%':\n      case '**':\n      case '&&':\n      case '||':\n      case '>':\n      case '<':\n      case '>=':\n      case '<=':\n      case '!=':\n      case '==':\n      case '?':\n      case 'in':\n      case 'is a':\n      case 'is defined':\n        // Prevent cyclic .ident, return literal\n        if (this._ident == this.peek()) {\n          return this.id();\n        } else {\n          this._ident = this.peek();\n          switch (this.currentState()) {\n            // unary op or selector in property / for\n            case 'for':\n            case 'selector':\n              return this.property();\n            // Part of a selector\n            case 'root':\n            case 'atblock':\n            case 'atrule':\n              return '[' == la ? this.subscript() : this.selector();\n            case 'function':\n            case 'conditional':\n              return this.looksLikeSelector() ? this.selector() : this.expression();\n            // Do not disrupt the ident when an operand\n            default:\n              return this.operand ? this.id() : this.expression();\n          }\n        }\n      // Selector or property\n      default:\n        switch (this.currentState()) {\n          case 'root':\n            return this.selector();\n          case 'for':\n          case 'selector':\n          case 'function':\n          case 'conditional':\n          case 'atblock':\n          case 'atrule':\n            return this.property();\n          default:\n            var id = this.id();\n            if ('interpolation' == this.previousState()) id.mixin = true;\n            return id;\n        }\n    }\n  },\n  /**\n   * '*'? (ident | '{' expression '}')+\n   */\n\n  interpolate: function interpolate() {\n    var node,\n      segs = [],\n      star;\n    star = this.accept('*');\n    if (star) segs.push(new nodes.Literal('*'));\n    while (true) {\n      if (this.accept('{')) {\n        this.state.push('interpolation');\n        segs.push(this.expression());\n        this.expect('}');\n        this.state.pop();\n      } else if (node = this.accept('-')) {\n        segs.push(new nodes.Literal('-'));\n      } else if (node = this.accept('ident')) {\n        segs.push(node.val);\n      } else {\n        break;\n      }\n    }\n    if (!segs.length) this.expect('ident');\n    return segs;\n  },\n  /**\n   *   property ':'? expression\n   * | ident\n   */\n\n  property: function property() {\n    if (this.looksLikeSelector(true)) return this.selector();\n\n    // property\n    var ident = this.interpolate(),\n      prop = new nodes.Property(ident),\n      ret = prop;\n\n    // optional ':'\n    this.accept('space');\n    if (this.accept(':')) this.accept('space');\n    this.state.push('property');\n    this.inProperty = true;\n    prop.expr = this.list();\n    if (prop.expr.isEmpty) ret = ident[0];\n    this.inProperty = false;\n    this.allowPostfix = true;\n    this.state.pop();\n\n    // optional ';'\n    this.accept(';');\n    return ret;\n  },\n  /**\n   *   selector ',' selector\n   * | selector newline selector\n   * | selector block\n   */\n\n  selector: function selector() {\n    var arr,\n      group = new nodes.Group(),\n      scope = this.selectorScope,\n      isRoot = 'root' == this.currentState(),\n      selector;\n    do {\n      // Clobber newline after ,\n      this.accept('newline');\n      arr = this.selectorParts();\n\n      // Push the selector\n      if (isRoot && scope) arr.unshift(new nodes.Literal(scope + ' '));\n      if (arr.length) {\n        selector = new nodes.Selector(arr);\n        selector.lineno = arr[0].lineno;\n        selector.column = arr[0].column;\n        group.push(selector);\n      }\n    } while (this.accept(',') || this.accept('newline'));\n    if ('selector-parts' == this.currentState()) return group.nodes;\n    this.state.push('selector');\n    group.block = this.block(group);\n    this.state.pop();\n    return group;\n  },\n  selectorParts: function selectorParts() {\n    var tok,\n      arr = [];\n\n    // Selector candidates,\n    // stitched together to\n    // form a selector.\n    while (tok = this.selectorToken()) {\n      debug.selector('%s', tok);\n      // Selector component\n      switch (tok.type) {\n        case '{':\n          this.skipSpaces();\n          var expr = this.expression();\n          this.skipSpaces();\n          this.expect('}');\n          arr.push(expr);\n          break;\n        case this.prefix && '.':\n          var literal = new nodes.Literal(tok.val + this.prefix);\n          literal.prefixed = true;\n          arr.push(literal);\n          break;\n        case 'comment':\n          // ignore comments\n          break;\n        case 'color':\n        case 'unit':\n          arr.push(new nodes.Literal(tok.val.raw));\n          break;\n        case 'space':\n          arr.push(new nodes.Literal(' '));\n          break;\n        case 'function':\n          arr.push(new nodes.Literal(tok.val.name + '('));\n          break;\n        case 'ident':\n          arr.push(new nodes.Literal(tok.val.name || tok.val.string));\n          break;\n        default:\n          arr.push(new nodes.Literal(tok.val));\n          if (tok.space) arr.push(new nodes.Literal(' '));\n      }\n    }\n    return arr;\n  },\n  /**\n   * ident ('=' | '?=') expression\n   */\n\n  assignment: function assignment() {\n    var op,\n      node,\n      ident = this.id(),\n      name = ident.name;\n    if (op = this.accept('=') || this.accept('?=') || this.accept('+=') || this.accept('-=') || this.accept('*=') || this.accept('/=') || this.accept('%=')) {\n      this.state.push('assignment');\n      var expr = this.list();\n      // @block support\n      if (expr.isEmpty) this.assignAtblock(expr);\n      node = new nodes.Ident(name, expr);\n      node.lineno = ident.lineno;\n      node.column = ident.column;\n      this.state.pop();\n      switch (op.type) {\n        case '?=':\n          var defined = new nodes.BinOp('is defined', node),\n            lookup = new nodes.Expression();\n          lookup.push(new nodes.Ident(name));\n          node = new nodes.Ternary(defined, lookup, node);\n          break;\n        case '+=':\n        case '-=':\n        case '*=':\n        case '/=':\n        case '%=':\n          node.val = new nodes.BinOp(op.type[0], new nodes.Ident(name), expr);\n          break;\n      }\n    }\n    return node;\n  },\n  /**\n   *   definition\n   * | call\n   */\n\n  function: function _function() {\n    var parens = 1,\n      i = 2,\n      tok;\n\n    // Lookahead and determine if we are dealing\n    // with a function call or definition. Here\n    // we pair parens to prevent false negatives\n    out: while (tok = this.lookahead(i++)) {\n      switch (tok.type) {\n        case 'function':\n        case '(':\n          ++parens;\n          break;\n        case ')':\n          if (! --parens) break out;\n          break;\n        case 'eos':\n          this.error('failed to find closing paren \")\"');\n      }\n    }\n\n    // Definition or call\n    switch (this.currentState()) {\n      case 'expression':\n        return this.functionCall();\n      default:\n        return this.looksLikeFunctionDefinition(i) ? this.functionDefinition() : this.expression();\n    }\n  },\n  /**\n   * url '(' (expression | urlchars)+ ')'\n   */\n\n  url: function url() {\n    this.expect('function');\n    this.state.push('function arguments');\n    var args = this.args();\n    this.expect(')');\n    this.state.pop();\n    return new nodes.Call('url', args);\n  },\n  /**\n   * '+'? ident '(' expression ')' block?\n   */\n\n  functionCall: function functionCall() {\n    var withBlock = this.accept('+');\n    if ('url' == this.peek().val.name) return this.url();\n    var tok = this.expect('function').val;\n    var name = tok.name;\n    this.state.push('function arguments');\n    this.parens++;\n    var args = this.args();\n    this.expect(')');\n    this.parens--;\n    this.state.pop();\n    var call = new nodes.Call(name, args);\n    call.column = tok.column;\n    call.lineno = tok.lineno;\n    if (withBlock) {\n      this.state.push('function');\n      call.block = this.block(call);\n      this.state.pop();\n    }\n    return call;\n  },\n  /**\n   * ident '(' params ')' block\n   */\n\n  functionDefinition: function functionDefinition() {\n    var tok = this.expect('function'),\n      name = tok.val.name;\n\n    // params\n    this.state.push('function params');\n    this.skipWhitespace();\n    var params = this.params();\n    this.skipWhitespace();\n    this.expect(')');\n    this.state.pop();\n\n    // Body\n    this.state.push('function');\n    var fn = new nodes.Function(name, params);\n    fn.column = tok.column;\n    fn.lineno = tok.lineno;\n    fn.block = this.block(fn);\n    this.state.pop();\n    return new nodes.Ident(name, fn);\n  },\n  /**\n   *   ident\n   * | ident '...'\n   * | ident '=' expression\n   * | ident ',' ident\n   */\n\n  params: function params() {\n    var tok,\n      node,\n      params = new nodes.Params();\n    while (tok = this.accept('ident')) {\n      this.accept('space');\n      params.push(node = tok.val);\n      if (this.accept('...')) {\n        node.rest = true;\n      } else if (this.accept('=')) {\n        node.val = this.expression();\n      }\n      this.skipWhitespace();\n      this.accept(',');\n      this.skipWhitespace();\n    }\n    return params;\n  },\n  /**\n   * (ident ':')? expression (',' (ident ':')? expression)*\n   */\n\n  args: function args() {\n    var args = new nodes.Arguments(),\n      keyword;\n    do {\n      // keyword\n      if ('ident' == this.peek().type && ':' == this.lookahead(2).type) {\n        keyword = this.next().val.string;\n        this.expect(':');\n        args.map[keyword] = this.expression();\n        // arg\n      } else {\n        args.push(this.expression());\n      }\n    } while (this.accept(','));\n    return args;\n  },\n  /**\n   * expression (',' expression)*\n   */\n\n  list: function list() {\n    var node = this.expression();\n    while (this.accept(',')) {\n      if (node.isList) {\n        list.push(this.expression());\n      } else {\n        var list = new nodes.Expression(true);\n        list.push(node);\n        list.push(this.expression());\n        node = list;\n      }\n    }\n    return node;\n  },\n  /**\n   * negation+\n   */\n\n  expression: function expression() {\n    var node,\n      expr = new nodes.Expression();\n    this.state.push('expression');\n    while (node = this.negation()) {\n      if (!node) this.error('unexpected token {peek} in expression');\n      expr.push(node);\n    }\n    this.state.pop();\n    if (expr.nodes.length) {\n      expr.lineno = expr.nodes[0].lineno;\n      expr.column = expr.nodes[0].column;\n    }\n    return expr;\n  },\n  /**\n   *   'not' ternary\n   * | ternary\n   */\n\n  negation: function negation() {\n    if (this.accept('not')) {\n      return new nodes.UnaryOp('!', this.negation());\n    }\n    return this.ternary();\n  },\n  /**\n   * logical ('?' expression ':' expression)?\n   */\n\n  ternary: function ternary() {\n    var node = this.logical();\n    if (this.accept('?')) {\n      var trueExpr = this.expression();\n      this.expect(':');\n      var falseExpr = this.expression();\n      node = new nodes.Ternary(node, trueExpr, falseExpr);\n    }\n    return node;\n  },\n  /**\n   * typecheck (('&&' | '||') typecheck)*\n   */\n\n  logical: function logical() {\n    var op,\n      node = this.typecheck();\n    while (op = this.accept('&&') || this.accept('||')) {\n      node = new nodes.BinOp(op.type, node, this.typecheck());\n    }\n    return node;\n  },\n  /**\n   * equality ('is a' equality)*\n   */\n\n  typecheck: function typecheck() {\n    var op,\n      node = this.equality();\n    while (op = this.accept('is a')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.type, node, this.equality());\n      this.operand = false;\n    }\n    return node;\n  },\n  /**\n   * in (('==' | '!=') in)*\n   */\n\n  equality: function equality() {\n    var op,\n      node = this.in();\n    while (op = this.accept('==') || this.accept('!=')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.type, node, this.in());\n      this.operand = false;\n    }\n    return node;\n  },\n  /**\n   * relational ('in' relational)*\n   */\n\n  in: function _in() {\n    var node = this.relational();\n    while (this.accept('in')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"in\", missing left-hand operand');\n      node = new nodes.BinOp('in', node, this.relational());\n      this.operand = false;\n    }\n    return node;\n  },\n  /**\n   * range (('>=' | '<=' | '>' | '<') range)*\n   */\n\n  relational: function relational() {\n    var op,\n      node = this.range();\n    while (op = this.accept('>=') || this.accept('<=') || this.accept('<') || this.accept('>')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.type, node, this.range());\n      this.operand = false;\n    }\n    return node;\n  },\n  /**\n   * additive (('..' | '...') additive)*\n   */\n\n  range: function range() {\n    var op,\n      node = this.additive();\n    if (op = this.accept('...') || this.accept('..')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.val, node, this.additive());\n      this.operand = false;\n    }\n    return node;\n  },\n  /**\n   * multiplicative (('+' | '-') multiplicative)*\n   */\n\n  additive: function additive() {\n    var op,\n      node = this.multiplicative();\n    while (op = this.accept('+') || this.accept('-')) {\n      this.operand = true;\n      node = new nodes.BinOp(op.type, node, this.multiplicative());\n      this.operand = false;\n    }\n    return node;\n  },\n  /**\n   * defined (('**' | '*' | '/' | '%') defined)*\n   */\n\n  multiplicative: function multiplicative() {\n    var op,\n      node = this.defined();\n    while (op = this.accept('**') || this.accept('*') || this.accept('/') || this.accept('%')) {\n      this.operand = true;\n      if ('/' == op && this.inProperty && !this.parens) {\n        this.stash.push(new Token('literal', new nodes.Literal('/')));\n        this.operand = false;\n        return node;\n      } else {\n        if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n        node = new nodes.BinOp(op.type, node, this.defined());\n        this.operand = false;\n      }\n    }\n    return node;\n  },\n  /**\n   *    unary 'is defined'\n   *  | unary\n   */\n\n  defined: function defined() {\n    var node = this.unary();\n    if (this.accept('is defined')) {\n      if (!node) this.error('illegal unary \"is defined\", missing left-hand operand');\n      node = new nodes.BinOp('is defined', node);\n    }\n    return node;\n  },\n  /**\n   *   ('!' | '~' | '+' | '-') unary\n   * | subscript\n   */\n\n  unary: function unary() {\n    var op, node;\n    if (op = this.accept('!') || this.accept('~') || this.accept('+') || this.accept('-')) {\n      this.operand = true;\n      node = this.unary();\n      if (!node) this.error('illegal unary \"' + op + '\"');\n      node = new nodes.UnaryOp(op.type, node);\n      this.operand = false;\n      return node;\n    }\n    return this.subscript();\n  },\n  /**\n   *   member ('[' expression ']')+ '='?\n   * | member\n   */\n\n  subscript: function subscript() {\n    var node = this.member(),\n      id;\n    while (this.accept('[')) {\n      node = new nodes.BinOp('[]', node, this.expression());\n      this.expect(']');\n    }\n    // TODO: TernaryOp :)\n    if (this.accept('=')) {\n      node.op += '=';\n      node.val = this.list();\n      // @block support\n      if (node.val.isEmpty) this.assignAtblock(node.val);\n    }\n    return node;\n  },\n  /**\n   *   primary ('.' id)+ '='?\n   * | primary\n   */\n\n  member: function member() {\n    var node = this.primary();\n    if (node) {\n      while (this.accept('.')) {\n        var id = new nodes.Ident(this.expect('ident').val.string);\n        node = new nodes.Member(node, id);\n      }\n      this.skipSpaces();\n      if (this.accept('=')) {\n        node.val = this.list();\n        // @block support\n        if (node.val.isEmpty) this.assignAtblock(node.val);\n      }\n    }\n    return node;\n  },\n  /**\n   *   '{' '}'\n   * | '{' pair (ws pair)* '}'\n   */\n\n  object: function object() {\n    var obj = new nodes.Object(),\n      id,\n      val,\n      comma,\n      hash;\n    this.expect('{');\n    this.skipWhitespace();\n    while (!this.accept('}')) {\n      if (this.accept('comment') || this.accept('newline')) continue;\n      if (!comma) this.accept(',');\n      id = this.accept('ident') || this.accept('string');\n      if (!id) {\n        this.error('expected \"ident\" or \"string\", got {peek}');\n      }\n      hash = id.val.hash;\n      this.skipSpacesAndComments();\n      this.expect(':');\n      val = this.expression();\n      obj.setValue(hash, val);\n      obj.setKey(hash, id.val);\n      comma = this.accept(',');\n      this.skipWhitespace();\n    }\n    return obj;\n  },\n  /**\n   *   unit\n   * | null\n   * | color\n   * | string\n   * | ident\n   * | boolean\n   * | literal\n   * | object\n   * | atblock\n   * | atrule\n   * | '(' expression ')' '%'?\n   */\n\n  primary: function primary() {\n    var tok;\n    this.skipSpaces();\n\n    // Parenthesis\n    if (this.accept('(')) {\n      ++this.parens;\n      var expr = this.expression(),\n        paren = this.expect(')');\n      --this.parens;\n      if (this.accept('%')) expr.push(new nodes.Ident('%'));\n      tok = this.peek();\n      // (1 + 2)px, (1 + 2)em, etc.\n      if (!paren.space && 'ident' == tok.type && ~units.indexOf(tok.val.string)) {\n        expr.push(new nodes.Ident(tok.val.string));\n        this.next();\n      }\n      return expr;\n    }\n    tok = this.peek();\n\n    // Primitive\n    switch (tok.type) {\n      case 'null':\n      case 'unit':\n      case 'color':\n      case 'string':\n      case 'literal':\n      case 'boolean':\n      case 'comment':\n        return this.next().val;\n      case !this.cond && '{':\n        return this.object();\n      case 'atblock':\n        return this.atblock();\n      // property lookup\n      case 'atrule':\n        var id = new nodes.Ident(this.next().val);\n        id.property = true;\n        return id;\n      case 'ident':\n        return this.ident();\n      case 'function':\n        return tok.anonymous ? this.functionDefinition() : this.functionCall();\n    }\n  }\n};","map":{"version":3,"names":["Lexer","require","nodes","Token","units","errors","cache","debug","lexer","selector","selectorTokens","pseudoSelectors","Parser","module","exports","str","options","self","getCache","hash","key","has","prefix","root","Root","state","stash","parens","css","pop","prevState","call","prototype","constructor","currentState","length","previousState","parse","block","parent","get","nodeName","peek","type","skipWhitespace","stmt","statement","accept","error","push","set","msg","val","undefined","toString","trim","ParseError","replace","next","expect","tok","line","lineno","column","lookahead","n","isSelectorToken","la","bracketed","indexOf","isPseudoSelector","name","lineContains","i","selectorToken","skip","tokens","skipNewlines","skipSpaces","skipSpacesAndComments","looksLikeFunctionDefinition","looksLikeSelector","fromProperty","node","brace","space","looksLikeAttributeSelector","looksLikeKeyframe","stateAllowsSelector","assignAtblock","expr","atblock","err","op","allowPostfix","If","expression","postfix","negate","id","each","Each","Block","keyframes","mozdocument","return","property","functionCall","isEmpty","scope","delim","comment","for","cond","Return","unless","if","token","item","elses","Atblock","atrule","Atrule","segments","selectorParts","map","join","selectorScope","null","supports","Supports","supportsCondition","supportsNegation","supportsOp","Expression","Literal","supportsFeature","feature","extend","selectors","sel","arr","Selector","optional","Extend","media","Media","queries","QueryList","query","Query","pred","Feature","string","predicate","interpolate","inProperty","list","calls","import","Import","charset","Charset","namespace","url","Namespace","Keyframes","literal","ident","assignment","_ident","subscript","operand","mixin","segs","star","prop","Property","ret","group","Group","isRoot","unshift","prefixed","raw","Ident","defined","BinOp","lookup","Ternary","function","out","functionDefinition","args","Call","withBlock","params","fn","Function","Params","rest","Arguments","keyword","isList","negation","UnaryOp","ternary","logical","trueExpr","falseExpr","typecheck","equality","in","relational","range","additive","multiplicative","unary","member","primary","Member","object","obj","Object","comma","setValue","setKey","paren","anonymous"],"sources":["/Users/lisasavoie/Desktop/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/stylus/lib/parser.js"],"sourcesContent":["/*!\n * Stylus - Parser\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Lexer = require('./lexer')\n  , nodes = require('./nodes')\n  , Token = require('./token')\n  , units = require('./units')\n  , errors = require('./errors')\n  , cache = require('./cache');\n\n// debuggers\n\nvar debug = {\n    lexer: require('debug')('stylus:lexer')\n  , selector: require('debug')('stylus:parser:selector')\n};\n\n/**\n * Selector composite tokens.\n */\n\nvar selectorTokens = [\n    'ident'\n  , 'string'\n  , 'selector'\n  , 'function'\n  , 'comment'\n  , 'boolean'\n  , 'space'\n  , 'color'\n  , 'unit'\n  , 'for'\n  , 'in'\n  , '['\n  , ']'\n  , '('\n  , ')'\n  , '+'\n  , '-'\n  , '*'\n  , '*='\n  , '<'\n  , '>'\n  , '='\n  , ':'\n  , '&'\n  , '&&'\n  , '~'\n  , '{'\n  , '}'\n  , '.'\n  , '..'\n  , '/'\n];\n\n/**\n * CSS pseudo-classes and pseudo-elements.\n * See http://dev.w3.org/csswg/selectors4/\n */\n\nvar pseudoSelectors = [\n  // Logical Combinations\n    'matches'\n  , 'not'\n\n  // Linguistic Pseudo-classes\n  , 'dir'\n  , 'lang'\n\n  // Location Pseudo-classes\n  , 'any-link'\n  , 'link'\n  , 'visited'\n  , 'local-link'\n  , 'target'\n  , 'scope'\n\n  // User Action Pseudo-classes\n  , 'hover'\n  , 'active'\n  , 'focus'\n  , 'drop'\n\n  // Time-dimensional Pseudo-classes\n  , 'current'\n  , 'past'\n  , 'future'\n\n  // The Input Pseudo-classes\n  , 'enabled'\n  , 'disabled'\n  , 'read-only'\n  , 'read-write'\n  , 'placeholder-shown'\n  , 'checked'\n  , 'indeterminate'\n  , 'valid'\n  , 'invalid'\n  , 'in-range'\n  , 'out-of-range'\n  , 'required'\n  , 'optional'\n  , 'user-error'\n\n  // Tree-Structural pseudo-classes\n  , 'root'\n  , 'empty'\n  , 'blank'\n  , 'nth-child'\n  , 'nth-last-child'\n  , 'first-child'\n  , 'last-child'\n  , 'only-child'\n  , 'nth-of-type'\n  , 'nth-last-of-type'\n  , 'first-of-type'\n  , 'last-of-type'\n  , 'only-of-type'\n  , 'nth-match'\n  , 'nth-last-match'\n\n  // Grid-Structural Selectors\n  , 'nth-column'\n  , 'nth-last-column'\n\n  // Pseudo-elements\n  , 'first-line'\n  , 'first-letter'\n  , 'before'\n  , 'after'\n\n  // Non-standard\n  , 'selection'\n];\n\n/**\n * Initialize a new `Parser` with the given `str` and `options`.\n *\n * @param {String} str\n * @param {Object} options\n * @api private\n */\n\nvar Parser = module.exports = function Parser(str, options) {\n  var self = this;\n  options = options || {};\n  Parser.cache = Parser.cache || Parser.getCache(options);\n  this.hash = Parser.cache.key(str, options);\n  this.lexer = {};\n  if (!Parser.cache.has(this.hash)) {\n    this.lexer = new Lexer(str, options);\n  }\n  this.prefix = options.prefix || '';\n  this.root = options.root || new nodes.Root;\n  this.state = ['root'];\n  this.stash = [];\n  this.parens = 0;\n  this.css = 0;\n  this.state.pop = function(){\n    self.prevState = [].pop.call(this);\n  };\n};\n\n/**\n * Get cache instance.\n *\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\nParser.getCache = function(options) {\n  return false === options.cache\n    ? cache(false)\n    : cache(options.cache || 'memory', options);\n};\n\n/**\n * Parser prototype.\n */\n\nParser.prototype = {\n\n  /**\n   * Constructor.\n   */\n\n  constructor: Parser,\n\n  /**\n   * Return current state.\n   *\n   * @return {String}\n   * @api private\n   */\n\n  currentState: function() {\n    return this.state[this.state.length - 1];\n  },\n\n  /**\n   * Return previous state.\n   *\n   * @return {String}\n   * @api private\n   */\n\n  previousState: function() {\n    return this.state[this.state.length - 2];\n  },\n\n  /**\n   * Parse the input, then return the root node.\n   *\n   * @return {Node}\n   * @api private\n   */\n\n  parse: function(){\n    var block = this.parent = this.root;\n    if (Parser.cache.has(this.hash)) {\n      block = Parser.cache.get(this.hash);\n      // normalize cached imports\n      if ('block' == block.nodeName) block.constructor = nodes.Root;\n    } else {\n      while ('eos' != this.peek().type) {\n        this.skipWhitespace();\n        if ('eos' == this.peek().type) break;\n        var stmt = this.statement();\n        this.accept(';');\n        if (!stmt) this.error('unexpected token {peek}, not allowed at the root level');\n        block.push(stmt);\n      }\n      Parser.cache.set(this.hash, block);\n    }\n    return block;\n  },\n\n  /**\n   * Throw an `Error` with the given `msg`.\n   *\n   * @param {String} msg\n   * @api private\n   */\n\n  error: function(msg){\n    var type = this.peek().type\n      , val = undefined == this.peek().val\n        ? ''\n        : ' ' + this.peek().toString();\n    if (val.trim() == type.trim()) val = '';\n    throw new errors.ParseError(msg.replace('{peek}', '\"' + type + val + '\"'));\n  },\n\n  /**\n   * Accept the given token `type`, and return it,\n   * otherwise return `undefined`.\n   *\n   * @param {String} type\n   * @return {Token}\n   * @api private\n   */\n\n  accept: function(type){\n    if (type == this.peek().type) {\n      return this.next();\n    }\n  },\n\n  /**\n   * Expect token `type` and return it, throw otherwise.\n   *\n   * @param {String} type\n   * @return {Token}\n   * @api private\n   */\n\n  expect: function(type){\n    if (type != this.peek().type) {\n      this.error('expected \"' + type + '\", got {peek}');\n    }\n    return this.next();\n  },\n\n  /**\n   * Get the next token.\n   *\n   * @return {Token}\n   * @api private\n   */\n\n  next: function() {\n    var tok = this.stash.length\n      ? this.stash.pop()\n      : this.lexer.next()\n      , line = tok.lineno\n      , column = tok.column || 1;\n\n    if (tok.val && tok.val.nodeName) {\n      tok.val.lineno = line;\n      tok.val.column = column;\n    }\n    nodes.lineno = line;\n    nodes.column = column;\n    debug.lexer('%s %s', tok.type, tok.val || '');\n    return tok;\n  },\n\n  /**\n   * Peek with lookahead(1).\n   *\n   * @return {Token}\n   * @api private\n   */\n\n  peek: function() {\n    return this.lexer.peek();\n  },\n\n  /**\n   * Lookahead `n` tokens.\n   *\n   * @param {Number} n\n   * @return {Token}\n   * @api private\n   */\n\n  lookahead: function(n){\n    return this.lexer.lookahead(n);\n  },\n\n  /**\n   * Check if the token at `n` is a valid selector token.\n   *\n   * @param {Number} n\n   * @return {Boolean}\n   * @api private\n   */\n\n  isSelectorToken: function(n) {\n    var la = this.lookahead(n).type;\n    switch (la) {\n      case 'for':\n        return this.bracketed;\n      case '[':\n        this.bracketed = true;\n        return true;\n      case ']':\n        this.bracketed = false;\n        return true;\n      default:\n        return ~selectorTokens.indexOf(la);\n    }\n  },\n\n  /**\n   * Check if the token at `n` is a pseudo selector.\n   *\n   * @param {Number} n\n   * @return {Boolean}\n   * @api private\n   */\n\n  isPseudoSelector: function(n){\n    var val = this.lookahead(n).val;\n    return val && ~pseudoSelectors.indexOf(val.name);\n  },\n\n  /**\n   * Check if the current line contains `type`.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   * @api private\n   */\n\n  lineContains: function(type){\n    var i = 1\n      , la;\n\n    while (la = this.lookahead(i++)) {\n      if (~['indent', 'outdent', 'newline', 'eos'].indexOf(la.type)) return;\n      if (type == la.type) return true;\n    }\n  },\n\n  /**\n   * Valid selector tokens.\n   */\n\n  selectorToken: function() {\n    if (this.isSelectorToken(1)) {\n      if ('{' == this.peek().type) {\n        // unclosed, must be a block\n        if (!this.lineContains('}')) return;\n        // check if ':' is within the braces.\n        // though not required by Stylus, chances\n        // are if someone is using {} they will\n        // use CSS-style props, helping us with\n        // the ambiguity in this case\n        var i = 0\n          , la;\n        while (la = this.lookahead(++i)) {\n          if ('}' == la.type) {\n            // Check empty block.\n            if (i == 2 || (i == 3 && this.lookahead(i - 1).type == 'space'))\n              return;\n            break;\n          }\n          if (':' == la.type) return;\n        }\n      }\n      return this.next();\n    }\n  },\n\n  /**\n   * Skip the given `tokens`.\n   *\n   * @param {Array} tokens\n   * @api private\n   */\n\n  skip: function(tokens) {\n    while (~tokens.indexOf(this.peek().type))\n      this.next();\n  },\n\n  /**\n   * Consume whitespace.\n   */\n\n  skipWhitespace: function() {\n    this.skip(['space', 'indent', 'outdent', 'newline']);\n  },\n\n  /**\n   * Consume newlines.\n   */\n\n  skipNewlines: function() {\n    while ('newline' == this.peek().type)\n      this.next();\n  },\n\n  /**\n   * Consume spaces.\n   */\n\n  skipSpaces: function() {\n    while ('space' == this.peek().type)\n      this.next();\n  },\n\n  /**\n   * Consume spaces and comments.\n   */\n\n  skipSpacesAndComments: function() {\n    while ('space' == this.peek().type\n      || 'comment' == this.peek().type)\n      this.next();\n  },\n\n  /**\n   * Check if the following sequence of tokens\n   * forms a function definition, ie trailing\n   * `{` or indentation.\n   */\n\n  looksLikeFunctionDefinition: function(i) {\n    return 'indent' == this.lookahead(i).type\n      || '{' == this.lookahead(i).type;\n  },\n\n  /**\n   * Check if the following sequence of tokens\n   * forms a selector.\n   *\n   * @param {Boolean} [fromProperty]\n   * @return {Boolean}\n   * @api private\n   */\n\n  looksLikeSelector: function(fromProperty) {\n    var i = 1\n      , node\n      , brace;\n\n    // Real property\n    if (fromProperty && ':' == this.lookahead(i + 1).type\n      && (this.lookahead(i + 1).space || 'indent' == this.lookahead(i + 2).type))\n      return false;\n\n    // Assume selector when an ident is\n    // followed by a selector\n    while ('ident' == this.lookahead(i).type\n      && ('newline' == this.lookahead(i + 1).type\n         || ',' == this.lookahead(i + 1).type)) i += 2;\n\n    while (this.isSelectorToken(i)\n      || ',' == this.lookahead(i).type) {\n\n      if ('selector' == this.lookahead(i).type)\n        return true;\n\n      if ('&' == this.lookahead(i + 1).type)\n        return true;\n\n      // Hash values inside properties\n      if (\n        i > 1 &&\n        'ident' === this.lookahead(i - 1).type &&\n        '.' === this.lookahead(i).type &&\n        'ident' === this.lookahead(i + 1).type\n      ) {\n        while ((node = this.lookahead(i + 2))) {\n          if ([\n            'indent',\n            'outdent',\n            '{',\n            ';',\n            'eos',\n            'selector',\n            'media',\n            'if',\n            'atrule',\n            ')',\n            '}',\n            'unit',\n            '[',\n            'for',\n            'function'\n          ].indexOf(node.type) !== -1) {\n            if (node.type === '[') {\n              while ((node = this.lookahead(i + 3)) && node.type !== ']') {\n                if (~['.', 'unit'].indexOf(node.type)) {\n                  return false;\n                }\n                i += 1\n              }\n            } else {\n              if (this.isPseudoSelector(i + 2)) {\n                return true;\n              }\n\n              if (node.type === ')' && this.lookahead(i + 3) && this.lookahead(i + 3).type === '}') {\n                break;\n              }\n\n              return [\n                'outdent',\n                ';',\n                'eos',\n                'media',\n                'if',\n                'atrule',\n                ')',\n                '}',\n                'unit',\n                'for',\n                'function'\n              ].indexOf(node.type) === -1;\n            }\n          }\n\n          i += 1\n        }\n\n        return true;\n      }\n\n      if ('.' == this.lookahead(i).type && 'ident' == this.lookahead(i + 1).type) {\n        return true;\n      }\n\n      if ('*' == this.lookahead(i).type && 'newline' == this.lookahead(i + 1).type)\n        return true;\n\n      // Pseudo-elements\n      if (':' == this.lookahead(i).type\n        && ':' == this.lookahead(i + 1).type)\n        return true;\n\n      // #a after an ident and newline\n      if ('color' == this.lookahead(i).type\n        && 'newline' == this.lookahead(i - 1).type)\n        return true;\n\n      if (this.looksLikeAttributeSelector(i))\n        return true;\n\n      if (('=' == this.lookahead(i).type || 'function' == this.lookahead(i).type)\n        && '{' == this.lookahead(i + 1).type)\n        return false;\n\n      // Hash values inside properties\n      if (':' == this.lookahead(i).type\n        && !this.isPseudoSelector(i + 1)\n        && this.lineContains('.'))\n        return false;\n\n      // the ':' token within braces signifies\n      // a selector. ex: \"foo{bar:'baz'}\"\n      if ('{' == this.lookahead(i).type) brace = true;\n      else if ('}' == this.lookahead(i).type) brace = false;\n      if (brace && ':' == this.lookahead(i).type) return true;\n\n      // '{' preceded by a space is considered a selector.\n      // for example \"foo{bar}{baz}\" may be a property,\n      // however \"foo{bar} {baz}\" is a selector\n      if ('space' == this.lookahead(i).type\n        && '{' == this.lookahead(i + 1).type)\n        return true;\n\n      // Assume pseudo selectors are NOT properties\n      // as 'td:th-child(1)' may look like a property\n      // and function call to the parser otherwise\n      if (':' == this.lookahead(i++).type\n        && !this.lookahead(i-1).space\n        && this.isPseudoSelector(i))\n        return true;\n\n      // Trailing space\n      if ('space' == this.lookahead(i).type\n        && 'newline' == this.lookahead(i + 1).type\n        && '{' == this.lookahead(i + 2).type)\n        return true;\n\n      if (',' == this.lookahead(i).type\n        && 'newline' == this.lookahead(i + 1).type)\n        return true;\n    }\n\n    // Trailing comma\n    if (',' == this.lookahead(i).type\n      && 'newline' == this.lookahead(i + 1).type)\n      return true;\n\n    // Trailing brace\n    if ('{' == this.lookahead(i).type\n      && 'newline' == this.lookahead(i + 1).type)\n      return true;\n\n    // css-style mode, false on ; }\n    if (this.css) {\n      if (';' == this.lookahead(i).type ||\n          '}' == this.lookahead(i - 1).type)\n        return false;\n    }\n\n    // Trailing separators\n    while (!~[\n        'indent'\n      , 'outdent'\n      , 'newline'\n      , 'for'\n      , 'if'\n      , ';'\n      , '}'\n      , 'eos'].indexOf(this.lookahead(i).type))\n      ++i;\n\n    if ('indent' == this.lookahead(i).type)\n      return true;\n  },\n\n  /**\n   * Check if the following sequence of tokens\n   * forms an attribute selector.\n   */\n\n  looksLikeAttributeSelector: function(n) {\n    var type = this.lookahead(n).type;\n    if ('=' == type && this.bracketed) return true;\n    return ('ident' == type || 'string' == type)\n      && ']' == this.lookahead(n + 1).type\n      && ('newline' == this.lookahead(n + 2).type || this.isSelectorToken(n + 2))\n      && !this.lineContains(':')\n      && !this.lineContains('=');\n  },\n\n  /**\n   * Check if the following sequence of tokens\n   * forms a keyframe block.\n   */\n\n  looksLikeKeyframe: function() {\n    var i = 2\n      , type;\n    switch (this.lookahead(i).type) {\n      case '{':\n      case 'indent':\n      case ',':\n        return true;\n      case 'newline':\n        while ('unit' == this.lookahead(++i).type\n            || 'newline' == this.lookahead(i).type) ;\n        type = this.lookahead(i).type;\n        return 'indent' == type || '{' == type;\n    }\n  },\n\n  /**\n   * Check if the current state supports selectors.\n   */\n\n  stateAllowsSelector: function() {\n    switch (this.currentState()) {\n      case 'root':\n      case 'atblock':\n      case 'selector':\n      case 'conditional':\n      case 'function':\n      case 'atrule':\n      case 'for':\n        return true;\n    }\n  },\n\n  /**\n   * Try to assign @block to the node.\n   *\n   * @param {Expression} expr\n   * @private\n   */\n\n  assignAtblock: function(expr) {\n    try {\n      expr.push(this.atblock(expr));\n    } catch(err) {\n      this.error('invalid right-hand side operand in assignment, got {peek}');\n    }\n  },\n\n  /**\n   *   statement\n   * | statement 'if' expression\n   * | statement 'unless' expression\n   */\n\n  statement: function() {\n    var stmt = this.stmt()\n      , state = this.prevState\n      , block\n      , op;\n\n    // special-case statements since it\n    // is not an expression. We could\n    // implement postfix conditionals at\n    // the expression level, however they\n    // would then fail to enclose properties\n    if (this.allowPostfix) {\n      this.allowPostfix = false;\n      state = 'expression';\n    }\n\n    switch (state) {\n      case 'assignment':\n      case 'expression':\n      case 'function arguments':\n        while (op =\n             this.accept('if')\n          || this.accept('unless')\n          || this.accept('for')) {\n          switch (op.type) {\n            case 'if':\n            case 'unless':\n              stmt = new nodes.If(this.expression(), stmt);\n              stmt.postfix = true;\n              stmt.negate = 'unless' == op.type;\n              this.accept(';');\n              break;\n            case 'for':\n              var key\n                , val = this.id().name;\n              if (this.accept(',')) key = this.id().name;\n              this.expect('in');\n              var each = new nodes.Each(val, key, this.expression());\n              block = new nodes.Block(this.parent, each);\n              block.push(stmt);\n              each.block = block;\n              stmt = each;\n          }\n        }\n    }\n\n    return stmt;\n  },\n\n  /**\n   *    ident\n   *  | selector\n   *  | literal\n   *  | charset\n   *  | namespace\n   *  | import\n   *  | require\n   *  | media\n   *  | atrule\n   *  | scope\n   *  | keyframes\n   *  | mozdocument\n   *  | for\n   *  | if\n   *  | unless\n   *  | comment\n   *  | expression\n   *  | 'return' expression\n   */\n\n  stmt: function() {\n    var tok = this.peek(), selector;\n    switch (tok.type) {\n      case 'keyframes':\n        return this.keyframes();\n      case '-moz-document':\n        return this.mozdocument();\n      case 'comment':\n      case 'selector':\n      case 'literal':\n      case 'charset':\n      case 'namespace':\n      case 'import':\n      case 'require':\n      case 'extend':\n      case 'media':\n      case 'atrule':\n      case 'ident':\n      case 'scope':\n      case 'supports':\n      case 'unless':\n      case 'function':\n      case 'for':\n      case 'if':\n        return this[tok.type]();\n      case 'return':\n        return this.return();\n      case '{':\n        return this.property();\n      default:\n        // Contextual selectors\n        if (this.stateAllowsSelector()) {\n          switch (tok.type) {\n            case 'color':\n            case '~':\n            case '>':\n            case '<':\n            case ':':\n            case '&':\n            case '&&':\n            case '[':\n            case '.':\n            case '/':\n              selector = this.selector();\n              selector.column = tok.column;\n              selector.lineno = tok.lineno;\n              return selector;\n            // relative reference\n            case '..':\n              if ('/' == this.lookahead(2).type)\n                return this.selector();\n            case '+':\n              return 'function' == this.lookahead(2).type\n                ? this.functionCall()\n                : this.selector();\n            case '*':\n              return this.property();\n            // keyframe blocks (10%, 20% { ... })\n            case 'unit':\n              if (this.looksLikeKeyframe()) {\n                selector = this.selector();\n                selector.column = tok.column;\n                selector.lineno = tok.lineno;\n                return selector;\n              }\n            case '-':\n              if ('{' == this.lookahead(2).type)\n                return this.property();\n          }\n        }\n\n        // Expression fallback\n        var expr = this.expression();\n        if (expr.isEmpty) this.error('unexpected {peek}');\n        return expr;\n    }\n  },\n\n  /**\n   * indent (!outdent)+ outdent\n   */\n\n  block: function(node, scope) {\n    var delim\n      , stmt\n      , next\n      , block = this.parent = new nodes.Block(this.parent, node);\n\n    if (false === scope) block.scope = false;\n\n    this.accept('newline');\n\n    // css-style\n    if (this.accept('{')) {\n      this.css++;\n      delim = '}';\n      this.skipWhitespace();\n    } else {\n      delim = 'outdent';\n      this.expect('indent');\n    }\n\n    while (delim != this.peek().type) {\n      // css-style\n      if (this.css) {\n        if (this.accept('newline') || this.accept('indent')) continue;\n        stmt = this.statement();\n        this.accept(';');\n        this.skipWhitespace();\n      } else {\n        if (this.accept('newline')) continue;\n        // skip useless indents and comments\n        next = this.lookahead(2).type;\n        if ('indent' == this.peek().type\n          && ~['outdent', 'newline', 'comment'].indexOf(next)) {\n          this.skip(['indent', 'outdent']);\n          continue;\n        }\n        if ('eos' == this.peek().type) return block;\n        stmt = this.statement();\n        this.accept(';');\n      }\n      if (!stmt) this.error('unexpected token {peek} in block');\n      block.push(stmt);\n    }\n\n    // css-style\n    if (this.css) {\n      this.skipWhitespace();\n      this.expect('}');\n      this.skipSpaces();\n      this.css--;\n    } else {\n      this.expect('outdent');\n    }\n\n    this.parent = block.parent;\n    return block;\n  },\n\n  /**\n   * comment space*\n   */\n\n  comment: function(){\n    var node = this.next().val;\n    this.skipSpaces();\n    return node;\n  },\n\n  /**\n   * for val (',' key) in expr\n   */\n\n  for: function() {\n    this.expect('for');\n    var key\n      , val = this.id().name;\n    if (this.accept(',')) key = this.id().name;\n    this.expect('in');\n    this.state.push('for');\n    this.cond = true;\n    var each = new nodes.Each(val, key, this.expression());\n    this.cond = false;\n    each.block = this.block(each, false);\n    this.state.pop();\n    return each;\n  },\n\n  /**\n   * return expression\n   */\n\n  return: function() {\n    this.expect('return');\n    var expr = this.expression();\n    return expr.isEmpty\n      ? new nodes.Return\n      : new nodes.Return(expr);\n  },\n\n  /**\n   * unless expression block\n   */\n\n  unless: function() {\n    this.expect('unless');\n    this.state.push('conditional');\n    this.cond = true;\n    var node = new nodes.If(this.expression(), true);\n    this.cond = false;\n    node.block = this.block(node, false);\n    this.state.pop();\n    return node;\n  },\n\n  /**\n   * if expression block (else block)?\n   */\n\n  if: function() {\n    var token = this.expect('if');\n\n    this.state.push('conditional');\n    this.cond = true;\n    var node = new nodes.If(this.expression())\n      , cond\n      , block\n      , item;\n\n    node.column = token.column;\n\n    this.cond = false;\n    node.block = this.block(node, false);\n    this.skip(['newline', 'comment']);\n    while (this.accept('else')) {\n      token = this.accept('if');\n      if (token) {\n        this.cond = true;\n        cond = this.expression();\n        this.cond = false;\n        block = this.block(node, false);\n        item = new nodes.If(cond, block);\n\n        item.column = token.column;\n\n        node.elses.push(item);\n      } else {\n        node.elses.push(this.block(node, false));\n        break;\n      }\n      this.skip(['newline', 'comment']);\n    }\n    this.state.pop();\n    return node;\n  },\n\n  /**\n   * @block\n   *\n   * @param {Expression} [node]\n   */\n\n  atblock: function(node){\n    if (!node) this.expect('atblock');\n    node = new nodes.Atblock;\n    this.state.push('atblock');\n    node.block = this.block(node, false);\n    this.state.pop();\n    return node;\n  },\n\n  /**\n   * atrule selector? block?\n   */\n\n  atrule: function(){\n    var type = this.expect('atrule').val\n      , node = new nodes.Atrule(type)\n      , tok;\n    this.skipSpacesAndComments();\n    node.segments = this.selectorParts();\n    this.skipSpacesAndComments();\n    tok = this.peek().type;\n    if ('indent' == tok || '{' == tok || ('newline' == tok\n      && '{' == this.lookahead(2).type)) {\n      this.state.push('atrule');\n      node.block = this.block(node);\n      this.state.pop();\n    }\n    return node;\n  },\n\n  /**\n   * scope\n   */\n\n  scope: function(){\n    this.expect('scope');\n    var selector = this.selectorParts()\n      .map(function(selector) { return selector.val; })\n      .join('');\n    this.selectorScope = selector.trim();\n    return nodes.null;\n  },\n\n  /**\n   * supports\n   */\n\n  supports: function(){\n    this.expect('supports');\n    var node = new nodes.Supports(this.supportsCondition());\n    this.state.push('atrule');\n    node.block = this.block(node);\n    this.state.pop();\n    return node;\n  },\n\n  /**\n   *   supports negation\n   * | supports op\n   * | expression\n   */\n\n  supportsCondition: function(){\n    var node = this.supportsNegation()\n      || this.supportsOp();\n    if (!node) {\n      this.cond = true;\n      node = this.expression();\n      this.cond = false;\n    }\n    return node;\n  },\n\n  /**\n   * 'not' supports feature\n   */\n\n  supportsNegation: function(){\n    if (this.accept('not')) {\n      var node = new nodes.Expression;\n      node.push(new nodes.Literal('not'));\n      node.push(this.supportsFeature());\n      return node;\n    }\n  },\n\n  /**\n   * supports feature (('and' | 'or') supports feature)+\n   */\n\n  supportsOp: function(){\n    var feature = this.supportsFeature()\n      , op\n      , expr;\n    if (feature) {\n      expr = new nodes.Expression;\n      expr.push(feature);\n      while (op = this.accept('&&') || this.accept('||')) {\n        expr.push(new nodes.Literal('&&' == op.val ? 'and' : 'or'));\n        expr.push(this.supportsFeature());\n      }\n      return expr;\n    }\n  },\n\n  /**\n   *   ('(' supports condition ')')\n   * | feature\n   */\n\n  supportsFeature: function(){\n    this.skipSpacesAndComments();\n    if ('(' == this.peek().type) {\n      var la = this.lookahead(2).type;\n\n      if ('ident' == la || '{' == la) {\n        return this.feature();\n      } else {\n        this.expect('(');\n        var node = new nodes.Expression;\n        node.push(new nodes.Literal('('));\n        node.push(this.supportsCondition());\n        this.expect(')')\n        node.push(new nodes.Literal(')'));\n        this.skipSpacesAndComments();\n        return node;\n      }\n    }\n  },\n\n  /**\n   * extend\n   */\n\n  extend: function(){\n    var tok = this.expect('extend')\n      , selectors = []\n      , sel\n      , node\n      , arr;\n\n    do {\n      arr = this.selectorParts();\n\n      if (!arr.length) continue;\n\n      sel = new nodes.Selector(arr);\n      selectors.push(sel);\n\n      if ('!' !== this.peek().type) continue;\n\n      tok = this.lookahead(2);\n      if ('ident' !== tok.type || 'optional' !== tok.val.name) continue;\n\n      this.skip(['!', 'ident']);\n      sel.optional = true;\n    } while(this.accept(','));\n\n    node = new nodes.Extend(selectors);\n    node.lineno = tok.lineno;\n    node.column = tok.column;\n    return node;\n  },\n\n  /**\n   * media queries\n   */\n\n  media: function() {\n    this.expect('media');\n    this.state.push('atrule');\n    var media = new nodes.Media(this.queries());\n    media.block = this.block(media);\n    this.state.pop();\n    return media;\n  },\n\n  /**\n   * query (',' query)*\n   */\n\n  queries: function() {\n    var queries = new nodes.QueryList\n      , skip = ['comment', 'newline', 'space'];\n\n    do {\n      this.skip(skip);\n      queries.push(this.query());\n      this.skip(skip);\n    } while (this.accept(','));\n    return queries;\n  },\n\n  /**\n   *   expression\n   * | (ident | 'not')? ident ('and' feature)*\n   * | feature ('and' feature)*\n   */\n\n  query: function() {\n    var query = new nodes.Query\n      , expr\n      , pred\n      , id;\n\n    // hash values support\n    if ('ident' == this.peek().type\n      && ('.' == this.lookahead(2).type\n      || '[' == this.lookahead(2).type)) {\n      this.cond = true;\n      expr = this.expression();\n      this.cond = false;\n      query.push(new nodes.Feature(expr.nodes));\n      return query;\n    }\n\n    if (pred = this.accept('ident') || this.accept('not')) {\n      pred = new nodes.Literal(pred.val.string || pred.val);\n\n      this.skipSpacesAndComments();\n      if (id = this.accept('ident')) {\n        query.type = id.val;\n        query.predicate = pred;\n      } else {\n        query.type = pred;\n      }\n      this.skipSpacesAndComments();\n\n      if (!this.accept('&&')) return query;\n    }\n\n    do {\n      query.push(this.feature());\n    } while (this.accept('&&'));\n\n    return query;\n  },\n\n  /**\n   * '(' ident ( ':'? expression )? ')'\n   */\n\n  feature: function() {\n    this.skipSpacesAndComments();\n    this.expect('(');\n    this.skipSpacesAndComments();\n    var node = new nodes.Feature(this.interpolate());\n    this.skipSpacesAndComments();\n    this.accept(':')\n    this.skipSpacesAndComments();\n    this.inProperty = true;\n    node.expr = this.list();\n    this.inProperty = false;\n    this.skipSpacesAndComments();\n    this.expect(')');\n    this.skipSpacesAndComments();\n    return node;\n  },\n\n  /**\n   * @-moz-document call (',' call)* block\n   */\n\n  mozdocument: function(){\n    this.expect('-moz-document');\n    var mozdocument = new nodes.Atrule('-moz-document')\n      , calls = [];\n    do {\n      this.skipSpacesAndComments();\n      calls.push(this.functionCall());\n      this.skipSpacesAndComments();\n    } while (this.accept(','));\n    mozdocument.segments = [new nodes.Literal(calls.join(', '))];\n    this.state.push('atrule');\n    mozdocument.block = this.block(mozdocument, false);\n    this.state.pop();\n    return mozdocument;\n  },\n\n  /**\n   * import expression\n   */\n\n  import: function() {\n    this.expect('import');\n    this.allowPostfix = true;\n    return new nodes.Import(this.expression(), false);\n  },\n\n  /**\n   * require expression\n   */\n\n  require: function() {\n    this.expect('require');\n    this.allowPostfix = true;\n    return new nodes.Import(this.expression(), true);\n  },\n\n  /**\n   * charset string\n   */\n\n  charset: function() {\n    this.expect('charset');\n    var str = this.expect('string').val;\n    this.allowPostfix = true;\n    return new nodes.Charset(str);\n  },\n\n  /**\n   * namespace ident? (string | url)\n   */\n\n  namespace: function() {\n    var str\n      , prefix;\n    this.expect('namespace');\n\n    this.skipSpacesAndComments();\n    if (prefix = this.accept('ident')) {\n      prefix = prefix.val;\n    }\n    this.skipSpacesAndComments();\n\n    str = this.accept('string') || this.url();\n    this.allowPostfix = true;\n    return new nodes.Namespace(str, prefix);\n  },\n\n  /**\n   * keyframes name block\n   */\n\n  keyframes: function() {\n    var tok = this.expect('keyframes')\n      , keyframes;\n\n    this.skipSpacesAndComments();\n    keyframes = new nodes.Keyframes(this.selectorParts(), tok.val);\n    keyframes.column = tok.column;\n\n    this.skipSpacesAndComments();\n\n    // block\n    this.state.push('atrule');\n    keyframes.block = this.block(keyframes);\n    this.state.pop();\n\n    return keyframes;\n  },\n\n  /**\n   * literal\n   */\n\n  literal: function() {\n    return this.expect('literal').val;\n  },\n\n  /**\n   * ident space?\n   */\n\n  id: function() {\n    var tok = this.expect('ident');\n    this.accept('space');\n    return tok.val;\n  },\n\n  /**\n   *   ident\n   * | assignment\n   * | property\n   * | selector\n   */\n\n  ident: function() {\n    var i = 2\n      , la = this.lookahead(i).type;\n\n    while ('space' == la) la = this.lookahead(++i).type;\n\n    switch (la) {\n      // Assignment\n      case '=':\n      case '?=':\n      case '-=':\n      case '+=':\n      case '*=':\n      case '/=':\n      case '%=':\n        return this.assignment();\n      // Member\n      case '.':\n        if ('space' == this.lookahead(i - 1).type) return this.selector();\n        if (this._ident == this.peek()) return this.id();\n        while ('=' != this.lookahead(++i).type\n          && !~['[', ',', 'newline', 'indent', 'eos'].indexOf(this.lookahead(i).type)) ;\n        if ('=' == this.lookahead(i).type) {\n          this._ident = this.peek();\n          return this.expression();\n        } else if (this.looksLikeSelector() && this.stateAllowsSelector()) {\n          return this.selector();\n        }\n      // Assignment []=\n      case '[':\n        if (this._ident == this.peek()) return this.id();\n        while (']' != this.lookahead(i++).type\n          && 'selector' != this.lookahead(i).type\n          && 'eos' != this.lookahead(i).type) ;\n        if ('=' == this.lookahead(i).type) {\n          this._ident = this.peek();\n          return this.expression();\n        } else if (this.looksLikeSelector() && this.stateAllowsSelector()) {\n          return this.selector();\n        }\n      // Operation\n      case '-':\n      case '+':\n      case '/':\n      case '*':\n      case '%':\n      case '**':\n      case '&&':\n      case '||':\n      case '>':\n      case '<':\n      case '>=':\n      case '<=':\n      case '!=':\n      case '==':\n      case '?':\n      case 'in':\n      case 'is a':\n      case 'is defined':\n        // Prevent cyclic .ident, return literal\n        if (this._ident == this.peek()) {\n          return this.id();\n        } else {\n          this._ident = this.peek();\n          switch (this.currentState()) {\n            // unary op or selector in property / for\n            case 'for':\n            case 'selector':\n              return this.property();\n            // Part of a selector\n            case 'root':\n            case 'atblock':\n            case 'atrule':\n              return '[' == la\n                ? this.subscript()\n                : this.selector();\n            case 'function':\n            case 'conditional':\n              return this.looksLikeSelector()\n                ? this.selector()\n                : this.expression();\n            // Do not disrupt the ident when an operand\n            default:\n              return this.operand\n                ? this.id()\n                : this.expression();\n          }\n        }\n      // Selector or property\n      default:\n        switch (this.currentState()) {\n          case 'root':\n            return this.selector();\n          case 'for':\n          case 'selector':\n          case 'function':\n          case 'conditional':\n          case 'atblock':\n          case 'atrule':\n            return this.property();\n          default:\n            var id = this.id();\n            if ('interpolation' == this.previousState()) id.mixin = true;\n            return id;\n        }\n    }\n  },\n\n  /**\n   * '*'? (ident | '{' expression '}')+\n   */\n\n  interpolate: function() {\n    var node\n      , segs = []\n      , star;\n\n    star = this.accept('*');\n    if (star) segs.push(new nodes.Literal('*'));\n\n    while (true) {\n      if (this.accept('{')) {\n        this.state.push('interpolation');\n        segs.push(this.expression());\n        this.expect('}');\n        this.state.pop();\n      } else if (node = this.accept('-')){\n        segs.push(new nodes.Literal('-'));\n      } else if (node = this.accept('ident')){\n        segs.push(node.val);\n      } else {\n        break;\n      }\n    }\n    if (!segs.length) this.expect('ident');\n    return segs;\n  },\n\n  /**\n   *   property ':'? expression\n   * | ident\n   */\n\n  property: function() {\n    if (this.looksLikeSelector(true)) return this.selector();\n\n    // property\n    var ident = this.interpolate()\n      , prop = new nodes.Property(ident)\n      , ret = prop;\n\n    // optional ':'\n    this.accept('space');\n    if (this.accept(':')) this.accept('space');\n\n    this.state.push('property');\n    this.inProperty = true;\n    prop.expr = this.list();\n    if (prop.expr.isEmpty) ret = ident[0];\n    this.inProperty = false;\n    this.allowPostfix = true;\n    this.state.pop();\n\n    // optional ';'\n    this.accept(';');\n\n    return ret;\n  },\n\n  /**\n   *   selector ',' selector\n   * | selector newline selector\n   * | selector block\n   */\n\n  selector: function() {\n    var arr\n      , group = new nodes.Group\n      , scope = this.selectorScope\n      , isRoot = 'root' == this.currentState()\n      , selector;\n\n    do {\n      // Clobber newline after ,\n      this.accept('newline');\n\n      arr = this.selectorParts();\n\n      // Push the selector\n      if (isRoot && scope) arr.unshift(new nodes.Literal(scope + ' '));\n      if (arr.length) {\n        selector = new nodes.Selector(arr);\n        selector.lineno = arr[0].lineno;\n        selector.column = arr[0].column;\n        group.push(selector);\n      }\n    } while (this.accept(',') || this.accept('newline'));\n\n    if ('selector-parts' == this.currentState()) return group.nodes;\n\n    this.state.push('selector');\n    group.block = this.block(group);\n    this.state.pop();\n\n    return group;\n  },\n\n  selectorParts: function(){\n    var tok\n      , arr = [];\n\n    // Selector candidates,\n    // stitched together to\n    // form a selector.\n    while (tok = this.selectorToken()) {\n      debug.selector('%s', tok);\n      // Selector component\n      switch (tok.type) {\n        case '{':\n          this.skipSpaces();\n          var expr = this.expression();\n          this.skipSpaces();\n          this.expect('}');\n          arr.push(expr);\n          break;\n        case this.prefix && '.':\n          var literal = new nodes.Literal(tok.val + this.prefix);\n          literal.prefixed = true;\n          arr.push(literal);\n          break;\n        case 'comment':\n          // ignore comments\n          break;\n        case 'color':\n        case 'unit':\n          arr.push(new nodes.Literal(tok.val.raw));\n          break;\n        case 'space':\n          arr.push(new nodes.Literal(' '));\n          break;\n        case 'function':\n          arr.push(new nodes.Literal(tok.val.name + '('));\n          break;\n        case 'ident':\n          arr.push(new nodes.Literal(tok.val.name || tok.val.string));\n          break;\n        default:\n          arr.push(new nodes.Literal(tok.val));\n          if (tok.space) arr.push(new nodes.Literal(' '));\n      }\n    }\n\n    return arr;\n  },\n\n  /**\n   * ident ('=' | '?=') expression\n   */\n\n  assignment: function() {\n    var\n      op,\n      node,\n      ident = this.id(),\n      name = ident.name;\n\n    if (op =\n         this.accept('=')\n      || this.accept('?=')\n      || this.accept('+=')\n      || this.accept('-=')\n      || this.accept('*=')\n      || this.accept('/=')\n      || this.accept('%=')) {\n      this.state.push('assignment');\n      var expr = this.list();\n      // @block support\n      if (expr.isEmpty) this.assignAtblock(expr);\n      node = new nodes.Ident(name, expr);\n\n      node.lineno = ident.lineno;\n      node.column = ident.column;\n\n      this.state.pop();\n\n      switch (op.type) {\n        case '?=':\n          var defined = new nodes.BinOp('is defined', node)\n            , lookup = new nodes.Expression;\n          lookup.push(new nodes.Ident(name));\n          node = new nodes.Ternary(defined, lookup, node);\n          break;\n        case '+=':\n        case '-=':\n        case '*=':\n        case '/=':\n        case '%=':\n          node.val = new nodes.BinOp(op.type[0], new nodes.Ident(name), expr);\n          break;\n      }\n    }\n\n    return node;\n  },\n\n  /**\n   *   definition\n   * | call\n   */\n\n  function: function() {\n    var parens = 1\n      , i = 2\n      , tok;\n\n    // Lookahead and determine if we are dealing\n    // with a function call or definition. Here\n    // we pair parens to prevent false negatives\n    out:\n    while (tok = this.lookahead(i++)) {\n      switch (tok.type) {\n        case 'function':\n        case '(':\n          ++parens;\n          break;\n        case ')':\n          if (!--parens) break out;\n          break;\n        case 'eos':\n          this.error('failed to find closing paren \")\"');\n      }\n    }\n\n    // Definition or call\n    switch (this.currentState()) {\n      case 'expression':\n        return this.functionCall();\n      default:\n        return this.looksLikeFunctionDefinition(i)\n          ? this.functionDefinition()\n          : this.expression();\n    }\n  },\n\n  /**\n   * url '(' (expression | urlchars)+ ')'\n   */\n\n  url: function() {\n    this.expect('function');\n    this.state.push('function arguments');\n    var args = this.args();\n    this.expect(')');\n    this.state.pop();\n    return new nodes.Call('url', args);\n  },\n\n  /**\n   * '+'? ident '(' expression ')' block?\n   */\n\n  functionCall: function() {\n    var withBlock = this.accept('+');\n    if ('url' == this.peek().val.name) return this.url();\n\n    var tok = this.expect('function').val;\n    var name = tok.name;\n\n    this.state.push('function arguments');\n    this.parens++;\n    var args = this.args();\n    this.expect(')');\n    this.parens--;\n    this.state.pop();\n    var call = new nodes.Call(name, args);\n\n    call.column = tok.column;\n    call.lineno = tok.lineno;\n\n    if (withBlock) {\n      this.state.push('function');\n      call.block = this.block(call);\n      this.state.pop();\n    }\n    return call;\n  },\n\n  /**\n   * ident '(' params ')' block\n   */\n\n  functionDefinition: function() {\n    var\n      tok = this.expect('function'),\n      name = tok.val.name;\n\n    // params\n    this.state.push('function params');\n    this.skipWhitespace();\n    var params = this.params();\n    this.skipWhitespace();\n    this.expect(')');\n    this.state.pop();\n\n    // Body\n    this.state.push('function');\n    var fn = new nodes.Function(name, params);\n\n    fn.column = tok.column;\n    fn.lineno = tok.lineno;\n\n    fn.block = this.block(fn);\n    this.state.pop();\n    return new nodes.Ident(name, fn);\n  },\n\n  /**\n   *   ident\n   * | ident '...'\n   * | ident '=' expression\n   * | ident ',' ident\n   */\n\n  params: function() {\n    var tok\n      , node\n      , params = new nodes.Params;\n    while (tok = this.accept('ident')) {\n      this.accept('space');\n      params.push(node = tok.val);\n      if (this.accept('...')) {\n        node.rest = true;\n      } else if (this.accept('=')) {\n        node.val = this.expression();\n      }\n      this.skipWhitespace();\n      this.accept(',');\n      this.skipWhitespace();\n    }\n    return params;\n  },\n\n  /**\n   * (ident ':')? expression (',' (ident ':')? expression)*\n   */\n\n  args: function() {\n    var args = new nodes.Arguments\n      , keyword;\n\n    do {\n      // keyword\n      if ('ident' == this.peek().type && ':' == this.lookahead(2).type) {\n        keyword = this.next().val.string;\n        this.expect(':');\n        args.map[keyword] = this.expression();\n      // arg\n      } else {\n        args.push(this.expression());\n      }\n    } while (this.accept(','));\n\n    return args;\n  },\n\n  /**\n   * expression (',' expression)*\n   */\n\n  list: function() {\n    var node = this.expression();\n\n    while (this.accept(',')) {\n      if (node.isList) {\n        list.push(this.expression());\n      } else {\n        var list = new nodes.Expression(true);\n        list.push(node);\n        list.push(this.expression());\n        node = list;\n      }\n    }\n    return node;\n  },\n\n  /**\n   * negation+\n   */\n\n  expression: function() {\n    var node\n      , expr = new nodes.Expression;\n    this.state.push('expression');\n    while (node = this.negation()) {\n      if (!node) this.error('unexpected token {peek} in expression');\n      expr.push(node);\n    }\n    this.state.pop();\n    if (expr.nodes.length) {\n      expr.lineno = expr.nodes[0].lineno;\n      expr.column = expr.nodes[0].column;\n    }\n    return expr;\n  },\n\n  /**\n   *   'not' ternary\n   * | ternary\n   */\n\n  negation: function() {\n    if (this.accept('not')) {\n      return new nodes.UnaryOp('!', this.negation());\n    }\n    return this.ternary();\n  },\n\n  /**\n   * logical ('?' expression ':' expression)?\n   */\n\n  ternary: function() {\n    var node = this.logical();\n    if (this.accept('?')) {\n      var trueExpr = this.expression();\n      this.expect(':');\n      var falseExpr = this.expression();\n      node = new nodes.Ternary(node, trueExpr, falseExpr);\n    }\n    return node;\n  },\n\n  /**\n   * typecheck (('&&' | '||') typecheck)*\n   */\n\n  logical: function() {\n    var op\n      , node = this.typecheck();\n    while (op = this.accept('&&') || this.accept('||')) {\n      node = new nodes.BinOp(op.type, node, this.typecheck());\n    }\n    return node;\n  },\n\n  /**\n   * equality ('is a' equality)*\n   */\n\n  typecheck: function() {\n    var op\n      , node = this.equality();\n    while (op = this.accept('is a')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.type, node, this.equality());\n      this.operand = false;\n    }\n    return node;\n  },\n\n  /**\n   * in (('==' | '!=') in)*\n   */\n\n  equality: function() {\n    var op\n      , node = this.in();\n    while (op = this.accept('==') || this.accept('!=')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.type, node, this.in());\n      this.operand = false;\n    }\n    return node;\n  },\n\n  /**\n   * relational ('in' relational)*\n   */\n\n  in: function() {\n    var node = this.relational();\n    while (this.accept('in')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"in\", missing left-hand operand');\n      node = new nodes.BinOp('in', node, this.relational());\n      this.operand = false;\n    }\n    return node;\n  },\n\n  /**\n   * range (('>=' | '<=' | '>' | '<') range)*\n   */\n\n  relational: function() {\n    var op\n      , node = this.range();\n    while (op =\n         this.accept('>=')\n      || this.accept('<=')\n      || this.accept('<')\n      || this.accept('>')\n      ) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.type, node, this.range());\n      this.operand = false;\n    }\n    return node;\n  },\n\n  /**\n   * additive (('..' | '...') additive)*\n   */\n\n  range: function() {\n    var op\n      , node = this.additive();\n    if (op = this.accept('...') || this.accept('..')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.val, node, this.additive());\n      this.operand = false;\n    }\n    return node;\n  },\n\n  /**\n   * multiplicative (('+' | '-') multiplicative)*\n   */\n\n  additive: function() {\n    var op\n      , node = this.multiplicative();\n    while (op = this.accept('+') || this.accept('-')) {\n      this.operand = true;\n      node = new nodes.BinOp(op.type, node, this.multiplicative());\n      this.operand = false;\n    }\n    return node;\n  },\n\n  /**\n   * defined (('**' | '*' | '/' | '%') defined)*\n   */\n\n  multiplicative: function() {\n    var op\n      , node = this.defined();\n    while (op =\n         this.accept('**')\n      || this.accept('*')\n      || this.accept('/')\n      || this.accept('%')) {\n      this.operand = true;\n      if ('/' == op && this.inProperty && !this.parens) {\n        this.stash.push(new Token('literal', new nodes.Literal('/')));\n        this.operand = false;\n        return node;\n      } else {\n        if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n        node = new nodes.BinOp(op.type, node, this.defined());\n        this.operand = false;\n      }\n    }\n    return node;\n  },\n\n  /**\n   *    unary 'is defined'\n   *  | unary\n   */\n\n  defined: function() {\n    var node = this.unary();\n    if (this.accept('is defined')) {\n      if (!node) this.error('illegal unary \"is defined\", missing left-hand operand');\n      node = new nodes.BinOp('is defined', node);\n    }\n    return node;\n  },\n\n  /**\n   *   ('!' | '~' | '+' | '-') unary\n   * | subscript\n   */\n\n  unary: function() {\n    var op\n      , node;\n    if (op =\n         this.accept('!')\n      || this.accept('~')\n      || this.accept('+')\n      || this.accept('-')) {\n      this.operand = true;\n      node = this.unary();\n      if (!node) this.error('illegal unary \"' + op + '\"');\n      node = new nodes.UnaryOp(op.type, node);\n      this.operand = false;\n      return node;\n    }\n    return this.subscript();\n  },\n\n  /**\n   *   member ('[' expression ']')+ '='?\n   * | member\n   */\n\n  subscript: function() {\n    var node = this.member()\n      , id;\n    while (this.accept('[')) {\n      node = new nodes.BinOp('[]', node, this.expression());\n      this.expect(']');\n    }\n    // TODO: TernaryOp :)\n    if (this.accept('=')) {\n      node.op += '=';\n      node.val = this.list();\n      // @block support\n      if (node.val.isEmpty) this.assignAtblock(node.val);\n    }\n    return node;\n  },\n\n  /**\n   *   primary ('.' id)+ '='?\n   * | primary\n   */\n\n  member: function() {\n    var node = this.primary();\n    if (node) {\n      while (this.accept('.')) {\n        var id = new nodes.Ident(this.expect('ident').val.string);\n        node = new nodes.Member(node, id);\n      }\n      this.skipSpaces();\n      if (this.accept('=')) {\n        node.val = this.list();\n        // @block support\n        if (node.val.isEmpty) this.assignAtblock(node.val);\n      }\n    }\n    return node;\n  },\n\n  /**\n   *   '{' '}'\n   * | '{' pair (ws pair)* '}'\n   */\n\n  object: function(){\n    var obj = new nodes.Object\n      , id, val, comma, hash;\n    this.expect('{');\n    this.skipWhitespace();\n\n    while (!this.accept('}')) {\n      if (this.accept('comment')\n        || this.accept('newline')) continue;\n\n      if (!comma) this.accept(',');\n      id = this.accept('ident') || this.accept('string');\n\n      if (!id) {\n        this.error('expected \"ident\" or \"string\", got {peek}');\n      }\n\n      hash = id.val.hash;\n\n      this.skipSpacesAndComments();\n      this.expect(':');\n\n      val = this.expression();\n\n      obj.setValue(hash, val);\n      obj.setKey(hash, id.val);\n\n      comma = this.accept(',');\n      this.skipWhitespace();\n    }\n\n    return obj;\n  },\n\n  /**\n   *   unit\n   * | null\n   * | color\n   * | string\n   * | ident\n   * | boolean\n   * | literal\n   * | object\n   * | atblock\n   * | atrule\n   * | '(' expression ')' '%'?\n   */\n\n  primary: function() {\n    var tok;\n    this.skipSpaces();\n\n    // Parenthesis\n    if (this.accept('(')) {\n      ++this.parens;\n      var expr = this.expression()\n        , paren = this.expect(')');\n      --this.parens;\n      if (this.accept('%')) expr.push(new nodes.Ident('%'));\n      tok = this.peek();\n      // (1 + 2)px, (1 + 2)em, etc.\n      if (!paren.space\n        && 'ident' == tok.type\n        && ~units.indexOf(tok.val.string)) {\n        expr.push(new nodes.Ident(tok.val.string));\n        this.next();\n      }\n      return expr;\n    }\n\n    tok = this.peek();\n\n    // Primitive\n    switch (tok.type) {\n      case 'null':\n      case 'unit':\n      case 'color':\n      case 'string':\n      case 'literal':\n      case 'boolean':\n      case 'comment':\n        return this.next().val;\n      case !this.cond && '{':\n        return this.object();\n      case 'atblock':\n        return this.atblock();\n      // property lookup\n      case 'atrule':\n        var id = new nodes.Ident(this.next().val);\n        id.property = true;\n        return id;\n      case 'ident':\n        return this.ident();\n      case 'function':\n        return tok.anonymous\n          ? this.functionDefinition()\n          : this.functionCall();\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}