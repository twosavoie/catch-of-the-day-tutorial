{"ast":null,"code":"/*!\n * Stylus - Renderer\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Parser = require('./parser'),\n  EventEmitter = require('events').EventEmitter,\n  Evaluator = require('./visitor/evaluator'),\n  Normalizer = require('./visitor/normalizer'),\n  events = new EventEmitter(),\n  utils = require('./utils'),\n  nodes = require('./nodes'),\n  join = require('path').join;\n\n/**\n * Expose `Renderer`.\n */\n\nmodule.exports = Renderer;\n\n/**\n * Initialize a new `Renderer` with the given `str` and `options`.\n *\n * @param {String} str\n * @param {Object} options\n * @api public\n */\n\nfunction Renderer(str, options) {\n  options = options || {};\n  options.globals = options.globals || {};\n  options.functions = options.functions || {};\n  options.use = options.use || [];\n  options.use = Array.isArray(options.use) ? options.use : [options.use];\n  options.imports = [join(__dirname, 'functions/index.styl')].concat(options.imports || []);\n  options.paths = options.paths || [];\n  options.filename = options.filename || 'stylus';\n  options.Evaluator = options.Evaluator || Evaluator;\n  this.options = options;\n  this.str = str;\n  this.events = events;\n}\n;\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nRenderer.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Expose events explicitly.\n */\n\nmodule.exports.events = events;\n\n/**\n * Parse and evaluate AST, then callback `fn(err, css, js)`.\n *\n * @param {Function} fn\n * @api public\n */\n\nRenderer.prototype.render = function (fn) {\n  var parser = this.parser = new Parser(this.str, this.options);\n\n  // use plugin(s)\n  for (var i = 0, len = this.options.use.length; i < len; i++) {\n    this.use(this.options.use[i]);\n  }\n  try {\n    nodes.filename = this.options.filename;\n    // parse\n    var ast = parser.parse();\n\n    // evaluate\n    this.evaluator = new this.options.Evaluator(ast, this.options);\n    this.nodes = nodes;\n    this.evaluator.renderer = this;\n    ast = this.evaluator.evaluate();\n\n    // normalize\n    var normalizer = new Normalizer(ast, this.options);\n    ast = normalizer.normalize();\n\n    // compile\n    var compiler = this.options.sourcemap ? new (require('./visitor/sourcemapper'))(ast, this.options) : new (require('./visitor/compiler'))(ast, this.options),\n      css = compiler.compile();\n\n    // expose sourcemap\n    if (this.options.sourcemap) this.sourcemap = compiler.map.toJSON();\n  } catch (err) {\n    var options = {};\n    options.input = err.input || this.str;\n    options.filename = err.filename || this.options.filename;\n    options.lineno = err.lineno || parser.lexer.lineno;\n    options.column = err.column || parser.lexer.column;\n    if (!fn) throw utils.formatException(err, options);\n    return fn(utils.formatException(err, options));\n  }\n\n  // fire `end` event\n  var listeners = this.listeners('end');\n  if (fn) listeners.push(fn);\n  for (var i = 0, len = listeners.length; i < len; i++) {\n    var ret = listeners[i](null, css);\n    if (ret) css = ret;\n  }\n  if (!fn) return css;\n};\n\n/**\n * Get dependencies of the compiled file.\n *\n * @param {String} [filename]\n * @return {Array}\n * @api public\n */\n\nRenderer.prototype.deps = function (filename) {\n  var opts = utils.merge({\n    cache: false\n  }, this.options);\n  if (filename) opts.filename = filename;\n  var DepsResolver = require('./visitor/deps-resolver'),\n    parser = new Parser(this.str, opts);\n  try {\n    nodes.filename = opts.filename;\n    // parse\n    var ast = parser.parse(),\n      resolver = new DepsResolver(ast, opts);\n\n    // resolve dependencies\n    return resolver.resolve();\n  } catch (err) {\n    var options = {};\n    options.input = err.input || this.str;\n    options.filename = err.filename || opts.filename;\n    options.lineno = err.lineno || parser.lexer.lineno;\n    options.column = err.column || parser.lexer.column;\n    throw utils.formatException(err, options);\n  }\n};\n\n/**\n * Set option `key` to `val`.\n *\n * @param {String} key\n * @param {Mixed} val\n * @return {Renderer} for chaining\n * @api public\n */\n\nRenderer.prototype.set = function (key, val) {\n  this.options[key] = val;\n  return this;\n};\n\n/**\n * Get option `key`.\n *\n * @param {String} key\n * @return {Mixed} val\n * @api public\n */\n\nRenderer.prototype.get = function (key) {\n  return this.options[key];\n};\n\n/**\n * Include the given `path` to the lookup paths array.\n *\n * @param {String} path\n * @return {Renderer} for chaining\n * @api public\n */\n\nRenderer.prototype.include = function (path) {\n  this.options.paths.push(path);\n  return this;\n};\n\n/**\n * Use the given `fn`.\n *\n * This allows for plugins to alter the renderer in\n * any way they wish, exposing paths etc.\n *\n * @param {Function}\n * @return {Renderer} for chaining\n * @api public\n */\n\nRenderer.prototype.use = function (fn) {\n  fn.call(this, this);\n  return this;\n};\n\n/**\n * Define function or global var with the given `name`. Optionally\n * the function may accept full expressions, by setting `raw`\n * to `true`.\n *\n * @param {String} name\n * @param {Function|Node} fn\n * @return {Renderer} for chaining\n * @api public\n */\n\nRenderer.prototype.define = function (name, fn, raw) {\n  fn = utils.coerce(fn, raw);\n  if (fn.nodeName) {\n    this.options.globals[name] = fn;\n    return this;\n  }\n\n  // function\n  this.options.functions[name] = fn;\n  if (undefined != raw) fn.raw = raw;\n  return this;\n};\n\n/**\n * Import the given `file`.\n *\n * @param {String} file\n * @return {Renderer} for chaining\n * @api public\n */\n\nRenderer.prototype.import = function (file) {\n  this.options.imports.push(file);\n  return this;\n};","map":{"version":3,"names":["Parser","require","EventEmitter","Evaluator","Normalizer","events","utils","nodes","join","module","exports","Renderer","str","options","globals","functions","use","Array","isArray","imports","__dirname","concat","paths","filename","prototype","__proto__","render","fn","parser","i","len","length","ast","parse","evaluator","renderer","evaluate","normalizer","normalize","compiler","sourcemap","css","compile","map","toJSON","err","input","lineno","lexer","column","formatException","listeners","push","ret","deps","opts","merge","cache","DepsResolver","resolver","resolve","set","key","val","get","include","path","call","define","name","raw","coerce","nodeName","undefined","import","file"],"sources":["/Users/lisasavoie/Desktop/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/stylus/lib/renderer.js"],"sourcesContent":["\n/*!\n * Stylus - Renderer\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Parser = require('./parser')\n  , EventEmitter = require('events').EventEmitter\n  , Evaluator = require('./visitor/evaluator')\n  , Normalizer = require('./visitor/normalizer')\n  , events = new EventEmitter\n  , utils = require('./utils')\n  , nodes = require('./nodes')\n  , join = require('path').join;\n\n/**\n * Expose `Renderer`.\n */\n\nmodule.exports = Renderer;\n\n/**\n * Initialize a new `Renderer` with the given `str` and `options`.\n *\n * @param {String} str\n * @param {Object} options\n * @api public\n */\n\nfunction Renderer(str, options) {\n  options = options || {};\n  options.globals = options.globals || {};\n  options.functions = options.functions || {};\n  options.use = options.use || [];\n  options.use = Array.isArray(options.use) ? options.use : [options.use];\n  options.imports = [join(__dirname, 'functions/index.styl')].concat(options.imports || []);\n  options.paths = options.paths || [];\n  options.filename = options.filename || 'stylus';\n  options.Evaluator = options.Evaluator || Evaluator;\n  this.options = options;\n  this.str = str;\n  this.events = events;\n};\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nRenderer.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Expose events explicitly.\n */\n\nmodule.exports.events = events;\n\n/**\n * Parse and evaluate AST, then callback `fn(err, css, js)`.\n *\n * @param {Function} fn\n * @api public\n */\n\nRenderer.prototype.render = function(fn){\n  var parser = this.parser = new Parser(this.str, this.options);\n\n  // use plugin(s)\n  for (var i = 0, len = this.options.use.length; i < len; i++) {\n    this.use(this.options.use[i]);\n  }\n\n  try {\n    nodes.filename = this.options.filename;\n    // parse\n    var ast = parser.parse();\n\n    // evaluate\n    this.evaluator = new this.options.Evaluator(ast, this.options);\n    this.nodes = nodes;\n    this.evaluator.renderer = this;\n    ast = this.evaluator.evaluate();\n\n    // normalize\n    var normalizer = new Normalizer(ast, this.options);\n    ast = normalizer.normalize();\n\n    // compile\n    var compiler = this.options.sourcemap\n      ? new (require('./visitor/sourcemapper'))(ast, this.options)\n      : new (require('./visitor/compiler'))(ast, this.options)\n      , css = compiler.compile();\n\n    // expose sourcemap\n    if (this.options.sourcemap) this.sourcemap = compiler.map.toJSON();\n  } catch (err) {\n    var options = {};\n    options.input = err.input || this.str;\n    options.filename = err.filename || this.options.filename;\n    options.lineno = err.lineno || parser.lexer.lineno;\n    options.column = err.column || parser.lexer.column;\n    if (!fn) throw utils.formatException(err, options);\n    return fn(utils.formatException(err, options));\n  }\n\n  // fire `end` event\n  var listeners = this.listeners('end');\n  if (fn) listeners.push(fn);\n  for (var i = 0, len = listeners.length; i < len; i++) {\n    var ret = listeners[i](null, css);\n    if (ret) css = ret;\n  }\n  if (!fn) return css;\n};\n\n/**\n * Get dependencies of the compiled file.\n *\n * @param {String} [filename]\n * @return {Array}\n * @api public\n */\n\nRenderer.prototype.deps = function(filename){\n  var opts = utils.merge({ cache: false }, this.options);\n  if (filename) opts.filename = filename;\n\n  var DepsResolver = require('./visitor/deps-resolver')\n    , parser = new Parser(this.str, opts);\n\n  try {\n    nodes.filename = opts.filename;\n    // parse\n    var ast = parser.parse()\n      , resolver = new DepsResolver(ast, opts);\n\n    // resolve dependencies\n    return resolver.resolve();\n  } catch (err) {\n    var options = {};\n    options.input = err.input || this.str;\n    options.filename = err.filename || opts.filename;\n    options.lineno = err.lineno || parser.lexer.lineno;\n    options.column = err.column || parser.lexer.column;\n    throw utils.formatException(err, options);\n  }\n};\n\n/**\n * Set option `key` to `val`.\n *\n * @param {String} key\n * @param {Mixed} val\n * @return {Renderer} for chaining\n * @api public\n */\n\nRenderer.prototype.set = function(key, val){\n  this.options[key] = val;\n  return this;\n};\n\n/**\n * Get option `key`.\n *\n * @param {String} key\n * @return {Mixed} val\n * @api public\n */\n\nRenderer.prototype.get = function(key){\n  return this.options[key];\n};\n\n/**\n * Include the given `path` to the lookup paths array.\n *\n * @param {String} path\n * @return {Renderer} for chaining\n * @api public\n */\n\nRenderer.prototype.include = function(path){\n  this.options.paths.push(path);\n  return this;\n};\n\n/**\n * Use the given `fn`.\n *\n * This allows for plugins to alter the renderer in\n * any way they wish, exposing paths etc.\n *\n * @param {Function}\n * @return {Renderer} for chaining\n * @api public\n */\n\nRenderer.prototype.use = function(fn){\n  fn.call(this, this);\n  return this;\n};\n\n/**\n * Define function or global var with the given `name`. Optionally\n * the function may accept full expressions, by setting `raw`\n * to `true`.\n *\n * @param {String} name\n * @param {Function|Node} fn\n * @return {Renderer} for chaining\n * @api public\n */\n\nRenderer.prototype.define = function(name, fn, raw){\n  fn = utils.coerce(fn, raw);\n\n  if (fn.nodeName) {\n    this.options.globals[name] = fn;\n    return this;\n  }\n\n  // function\n  this.options.functions[name] = fn;\n  if (undefined != raw) fn.raw = raw;\n  return this;\n};\n\n/**\n * Import the given `file`.\n *\n * @param {String} file\n * @return {Renderer} for chaining\n * @api public\n */\n\nRenderer.prototype.import = function(file){\n  this.options.imports.push(file);\n  return this;\n};\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}