{"ast":null,"code":"var _classCallCheck = require(\"/Users/lisasavoie/Desktop/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/lisasavoie/Desktop/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/@babel/runtime/helpers/createClass.js\").default;\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar SourceMapGenerator = require(\"./source-map-generator\").SourceMapGenerator;\nvar util = require(\"./util\");\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nvar REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nvar NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nvar isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nvar SourceNode = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n    _classCallCheck(this, SourceNode);\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n  _createClass(SourceNode, [{\n    key: \"add\",\n    value:\n    /**\n     * Add a chunk of generated JS to this source node.\n     *\n     * @param aChunk A string snippet of generated JS code, another instance of\n     *        SourceNode, or an array where each member is one of those things.\n     */\n    function add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function (chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk);\n      }\n      return this;\n    }\n\n    /**\n     * Add a chunk of generated JS to the beginning of this source node.\n     *\n     * @param aChunk A string snippet of generated JS code, another instance of\n     *        SourceNode, or an array where each member is one of those things.\n     */\n  }, {\n    key: \"prepend\",\n    value: function prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk);\n      }\n      return this;\n    }\n\n    /**\n     * Walk over the tree of JS snippets in this node and its children. The\n     * walking function is called once for each snippet of JS and is passed that\n     * snippet and the its original associated source's line/column location.\n     *\n     * @param aFn The traversal function.\n     */\n  }, {\n    key: \"walk\",\n    value: function walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else if (chunk !== \"\") {\n          aFn(chunk, {\n            source: this.source,\n            line: this.line,\n            column: this.column,\n            name: this.name\n          });\n        }\n      }\n    }\n\n    /**\n     * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n     * each of `this.children`.\n     *\n     * @param aSep The separator.\n     */\n  }, {\n    key: \"join\",\n    value: function join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }\n\n    /**\n     * Call String.prototype.replace on the very right-most source snippet. Useful\n     * for trimming whitespace from the end of a source node, etc.\n     *\n     * @param aPattern The pattern to replace.\n     * @param aReplacement The thing to replace the pattern with.\n     */\n  }, {\n    key: \"replaceRight\",\n    value: function replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }\n\n    /**\n     * Set the source content for a source file. This will be added to the SourceMapGenerator\n     * in the sourcesContent field.\n     *\n     * @param aSourceFile The filename of the source file\n     * @param aSourceContent The content of the source file\n     */\n  }, {\n    key: \"setSourceContent\",\n    value: function setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }\n\n    /**\n     * Walk over the tree of SourceNodes. The walking function is called for each\n     * source file content and is passed the filename and source content.\n     *\n     * @param aFn The traversal function.\n     */\n  }, {\n    key: \"walkSourceContents\",\n    value: function walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var _i = 0, _len = sources.length; _i < _len; _i++) {\n        aFn(util.fromSetString(sources[_i]), this.sourceContents[sources[_i]]);\n      }\n    }\n\n    /**\n     * Return the string representation of this source node. Walks over the tree\n     * and concatenates all the various snippets together to one string.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var str = \"\";\n      this.walk(function (chunk) {\n        str += chunk;\n      });\n      return str;\n    }\n\n    /**\n     * Returns the string representation of this source node along with a source\n     * map.\n     */\n  }, {\n    key: \"toStringWithSourceMap\",\n    value: function toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function (chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            // Mappings end at eol\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function (sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return {\n        code: generated.code,\n        map: map\n      };\n    }\n  }], [{\n    key: \"fromStringWithSourceMap\",\n    value: function fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      // The SourceNode we want to fill with the generated code\n      // and the SourceMap\n      var node = new SourceNode();\n\n      // All even indices of this array are one line of the generated code,\n      // while all odd indices are the newlines between two adjacent lines\n      // (since `REGEX_NEWLINE` captures its match).\n      // Processed fragments are accessed by calling `shiftNextLine`.\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = function shiftNextLine() {\n        var lineContents = getNextLine();\n        // The last line of a file might not have a newline.\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : undefined;\n        }\n      };\n\n      // We need to remember the position of \"remainingLines\"\n      var lastGeneratedLine = 1,\n        lastGeneratedColumn = 0;\n\n      // The generate SourceNodes we need a code range.\n      // To extract it current and last mapping is used.\n      // Here we store the last mapping.\n      var lastMapping = null;\n      var nextLine;\n      aSourceMapConsumer.eachMapping(function (mapping) {\n        if (lastMapping !== null) {\n          // We add the code from \"lastMapping\" to \"mapping\":\n          // First check if there is a new line in between.\n          if (lastGeneratedLine < mapping.generatedLine) {\n            // Associate first line with \"lastMapping\"\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n            // The remaining code is added without mapping\n          } else {\n            // There is no new line in between.\n            // Associate the code between \"lastGeneratedColumn\" and\n            // \"mapping.generatedColumn\" with \"lastMapping\"\n            nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            // No more remaining code, continue\n            lastMapping = mapping;\n            return;\n          }\n        }\n        // We add the generated code until the first mapping\n        // to the SourceNode without any mapping.\n        // Each line is added as separate string.\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      // We have processed all mappings.\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          // Associate the remaining code in the current line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        // and add the remaining lines without any mapping\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n\n      // Copy sourcesContent into SourceNode\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === undefined) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));\n        }\n      }\n    }\n  }]);\n  return SourceNode;\n}();\nexports.SourceNode = SourceNode;","map":{"version":3,"names":["SourceMapGenerator","require","util","REGEX_NEWLINE","NEWLINE_CODE","isSourceNode","SourceNode","aLine","aColumn","aSource","aChunks","aName","children","sourceContents","line","column","source","name","add","aChunk","Array","isArray","forEach","chunk","push","TypeError","i","length","prepend","unshift","aFn","len","walk","aSep","newChildren","aPattern","aReplacement","lastChild","replaceRight","replace","aSourceFile","aSourceContent","toSetString","walkSourceContents","sources","Object","keys","fromSetString","str","aArgs","generated","code","map","sourceMappingActive","lastOriginalSource","lastOriginalLine","lastOriginalColumn","lastOriginalName","original","addMapping","idx","charCodeAt","sourceFile","sourceContent","setSourceContent","aGeneratedCode","aSourceMapConsumer","aRelativePath","node","remainingLines","split","remainingLinesIndex","shiftNextLine","lineContents","getNextLine","newLine","undefined","lastGeneratedLine","lastGeneratedColumn","lastMapping","nextLine","eachMapping","mapping","generatedLine","addMappingWithCode","substr","generatedColumn","splice","join","content","sourceContentFor","originalLine","originalColumn","exports"],"sources":["/Users/lisasavoie/Desktop/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/stylus/node_modules/source-map/lib/source-node.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst SourceMapGenerator = require(\"./source-map-generator\").SourceMapGenerator;\nconst util = require(\"./util\");\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nconst REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nconst NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nconst isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nclass SourceNode {\n  constructor(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n  static fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    const node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    const remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    let remainingLinesIndex = 0;\n    const shiftNextLine = function() {\n      const lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      const newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    let lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    let lastMapping = null;\n    let nextLine;\n\n    aSourceMapConsumer.eachMapping(function(mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          nextLine = remainingLines[remainingLinesIndex] || \"\";\n          const code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        nextLine = remainingLines[remainingLinesIndex] || \"\";\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function(sourceFile) {\n      const content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        const source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  }\n\n  /**\n   * Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  add(aChunk) {\n    if (Array.isArray(aChunk)) {\n      aChunk.forEach(function(chunk) {\n        this.add(chunk);\n      }, this);\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      if (aChunk) {\n        this.children.push(aChunk);\n      }\n    } else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n      for (let i = aChunk.length - 1; i >= 0; i--) {\n        this.prepend(aChunk[i]);\n      }\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      this.children.unshift(aChunk);\n    } else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.\n   */\n  walk(aFn) {\n    let chunk;\n    for (let i = 0, len = this.children.length; i < len; i++) {\n      chunk = this.children[i];\n      if (chunk[isSourceNode]) {\n        chunk.walk(aFn);\n      } else if (chunk !== \"\") {\n        aFn(chunk, { source: this.source,\n                      line: this.line,\n                      column: this.column,\n                      name: this.name });\n      }\n    }\n  }\n\n  /**\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.\n   */\n  join(aSep) {\n    let newChildren;\n    let i;\n    const len = this.children.length;\n    if (len > 0) {\n      newChildren = [];\n      for (i = 0; i < len - 1; i++) {\n        newChildren.push(this.children[i]);\n        newChildren.push(aSep);\n      }\n      newChildren.push(this.children[i]);\n      this.children = newChildren;\n    }\n    return this;\n  }\n\n  /**\n   * Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.\n   */\n  replaceRight(aPattern, aReplacement) {\n    const lastChild = this.children[this.children.length - 1];\n    if (lastChild[isSourceNode]) {\n      lastChild.replaceRight(aPattern, aReplacement);\n    } else if (typeof lastChild === \"string\") {\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    } else {\n      this.children.push(\"\".replace(aPattern, aReplacement));\n    }\n    return this;\n  }\n\n  /**\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file\n   */\n  setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  }\n\n  /**\n   * Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.\n   */\n  walkSourceContents(aFn) {\n    for (let i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    const sources = Object.keys(this.sourceContents);\n    for (let i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  }\n\n  /**\n   * Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.\n   */\n  toString() {\n    let str = \"\";\n    this.walk(function(chunk) {\n      str += chunk;\n    });\n    return str;\n  }\n\n  /**\n   * Returns the string representation of this source node along with a source\n   * map.\n   */\n  toStringWithSourceMap(aArgs) {\n    const generated = {\n      code: \"\",\n      line: 1,\n      column: 0\n    };\n    const map = new SourceMapGenerator(aArgs);\n    let sourceMappingActive = false;\n    let lastOriginalSource = null;\n    let lastOriginalLine = null;\n    let lastOriginalColumn = null;\n    let lastOriginalName = null;\n    this.walk(function(chunk, original) {\n      generated.code += chunk;\n      if (original.source !== null\n          && original.line !== null\n          && original.column !== null) {\n        if (lastOriginalSource !== original.source\n          || lastOriginalLine !== original.line\n          || lastOriginalColumn !== original.column\n          || lastOriginalName !== original.name) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n        lastOriginalSource = original.source;\n        lastOriginalLine = original.line;\n        lastOriginalColumn = original.column;\n        lastOriginalName = original.name;\n        sourceMappingActive = true;\n      } else if (sourceMappingActive) {\n        map.addMapping({\n          generated: {\n            line: generated.line,\n            column: generated.column\n          }\n        });\n        lastOriginalSource = null;\n        sourceMappingActive = false;\n      }\n      for (let idx = 0, length = chunk.length; idx < length; idx++) {\n        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n          generated.line++;\n          generated.column = 0;\n          // Mappings end at eol\n          if (idx + 1 === length) {\n            lastOriginalSource = null;\n            sourceMappingActive = false;\n          } else if (sourceMappingActive) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n        } else {\n          generated.column++;\n        }\n      }\n    });\n    this.walkSourceContents(function(sourceFile, sourceContent) {\n      map.setSourceContent(sourceFile, sourceContent);\n    });\n\n    return { code: generated.code, map };\n  }\n}\n\nexports.SourceNode = SourceNode;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}