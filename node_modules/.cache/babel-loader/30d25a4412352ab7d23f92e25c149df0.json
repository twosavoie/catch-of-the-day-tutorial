{"ast":null,"code":"/*!\n * Stylus - SourceMapper\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Compiler = require('./compiler'),\n  Buffer = require('safer-buffer').Buffer,\n  SourceMapGenerator = require('source-map').SourceMapGenerator,\n  basename = require('path').basename,\n  extname = require('path').extname,\n  dirname = require('path').dirname,\n  join = require('path').join,\n  relative = require('path').relative,\n  sep = require('path').sep,\n  fs = require('fs');\n\n/**\n * Initialize a new `SourceMapper` generator with the given `root` Node\n * and the following `options`.\n *\n * @param {Node} root\n * @api public\n */\n\nvar SourceMapper = module.exports = function SourceMapper(root, options) {\n  options = options || {};\n  this.column = 1;\n  this.lineno = 1;\n  this.contents = {};\n  this.filename = options.filename;\n  this.dest = options.dest;\n  var sourcemap = options.sourcemap;\n  this.basePath = sourcemap.basePath || '.';\n  this.inline = sourcemap.inline;\n  this.comment = sourcemap.comment;\n  if (this.dest && extname(this.dest) === '.css') {\n    this.basename = basename(this.dest);\n    this.dest = dirname(this.dest);\n  } else {\n    this.basename = basename(this.filename, extname(this.filename)) + '.css';\n  }\n  this.utf8 = false;\n  this.map = new SourceMapGenerator({\n    file: this.basename,\n    sourceRoot: sourcemap.sourceRoot || null\n  });\n  Compiler.call(this, root, options);\n};\n\n/**\n * Inherit from `Compiler.prototype`.\n */\n\nSourceMapper.prototype.__proto__ = Compiler.prototype;\n\n/**\n * Generate and write source map.\n *\n * @return {String}\n * @api private\n */\n\nvar compile = Compiler.prototype.compile;\nSourceMapper.prototype.compile = function () {\n  var css = compile.call(this),\n    out = this.basename + '.map',\n    url = this.normalizePath(this.dest ? join(this.dest, out) : join(dirname(this.filename), out)),\n    map;\n  if (this.inline) {\n    map = this.map.toString();\n    url = 'data:application/json;' + (this.utf8 ? 'charset=utf-8;' : '') + 'base64,' + Buffer.from(map).toString('base64');\n  }\n  if (this.inline || false !== this.comment) css += '/*# sourceMappingURL=' + url + ' */';\n  return css;\n};\n\n/**\n * Add mapping information.\n *\n * @param {String} str\n * @param {Node} node\n * @return {String}\n * @api private\n */\n\nSourceMapper.prototype.out = function (str, node) {\n  if (node && node.lineno) {\n    var filename = this.normalizePath(node.filename);\n    this.map.addMapping({\n      original: {\n        line: node.lineno,\n        column: node.column - 1\n      },\n      generated: {\n        line: this.lineno,\n        column: this.column - 1\n      },\n      source: filename\n    });\n    if (this.inline && !this.contents[filename]) {\n      this.map.setSourceContent(filename, fs.readFileSync(node.filename, 'utf-8'));\n      this.contents[filename] = true;\n    }\n  }\n  this.move(str);\n  return str;\n};\n\n/**\n * Move current line and column position.\n *\n * @param {String} str\n * @api private\n */\n\nSourceMapper.prototype.move = function (str) {\n  var lines = str.match(/\\n/g),\n    idx = str.lastIndexOf('\\n');\n  if (lines) this.lineno += lines.length;\n  this.column = ~idx ? str.length - idx : this.column + str.length;\n};\n\n/**\n * Normalize the given `path`.\n *\n * @param {String} path\n * @return {String}\n * @api private\n */\n\nSourceMapper.prototype.normalizePath = function (path) {\n  path = relative(this.dest || this.basePath, path);\n  if ('\\\\' == sep) {\n    path = path.replace(/^[a-z]:\\\\/i, '/').replace(/\\\\/g, '/');\n  }\n  return path;\n};\n\n/**\n * Visit Literal.\n */\n\nvar literal = Compiler.prototype.visitLiteral;\nSourceMapper.prototype.visitLiteral = function (lit) {\n  var val = literal.call(this, lit),\n    filename = this.normalizePath(lit.filename),\n    indentsRe = /^\\s+/,\n    lines = val.split('\\n');\n\n  // add mappings for multiline literals\n  if (lines.length > 1) {\n    lines.forEach(function (line, i) {\n      var indents = line.match(indentsRe),\n        column = indents && indents[0] ? indents[0].length : 0;\n      if (lit.css) column += 2;\n      this.map.addMapping({\n        original: {\n          line: lit.lineno + i,\n          column: column\n        },\n        generated: {\n          line: this.lineno + i,\n          column: 0\n        },\n        source: filename\n      });\n    }, this);\n  }\n  return val;\n};\n\n/**\n * Visit Charset.\n */\n\nvar charset = Compiler.prototype.visitCharset;\nSourceMapper.prototype.visitCharset = function (node) {\n  this.utf8 = 'utf-8' == node.val.string.toLowerCase();\n  return charset.call(this, node);\n};","map":{"version":3,"names":["Compiler","require","Buffer","SourceMapGenerator","basename","extname","dirname","join","relative","sep","fs","SourceMapper","module","exports","root","options","column","lineno","contents","filename","dest","sourcemap","basePath","inline","comment","utf8","map","file","sourceRoot","call","prototype","__proto__","compile","css","out","url","normalizePath","toString","from","str","node","addMapping","original","line","generated","source","setSourceContent","readFileSync","move","lines","match","idx","lastIndexOf","length","path","replace","literal","visitLiteral","lit","val","indentsRe","split","forEach","i","indents","charset","visitCharset","string","toLowerCase"],"sources":["/Users/lisasavoie/Desktop/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/stylus/lib/visitor/sourcemapper.js"],"sourcesContent":["/*!\n * Stylus - SourceMapper\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Compiler = require('./compiler')\n  , Buffer = require('safer-buffer').Buffer\n  , SourceMapGenerator = require('source-map').SourceMapGenerator\n  , basename = require('path').basename\n  , extname = require('path').extname\n  , dirname = require('path').dirname\n  , join = require('path').join\n  , relative = require('path').relative\n  , sep = require('path').sep\n  , fs = require('fs');\n\n/**\n * Initialize a new `SourceMapper` generator with the given `root` Node\n * and the following `options`.\n *\n * @param {Node} root\n * @api public\n */\n\nvar SourceMapper = module.exports = function SourceMapper(root, options){\n  options = options || {};\n  this.column = 1;\n  this.lineno = 1;\n  this.contents = {};\n  this.filename = options.filename;\n  this.dest = options.dest;\n\n  var sourcemap = options.sourcemap;\n  this.basePath = sourcemap.basePath || '.';\n  this.inline = sourcemap.inline;\n  this.comment = sourcemap.comment;\n  if (this.dest && extname(this.dest) === '.css') {\n    this.basename = basename(this.dest);\n    this.dest = dirname(this.dest);\n  } else {\n    this.basename = basename(this.filename, extname(this.filename)) + '.css';\n  }\n  this.utf8 = false;\n\n  this.map = new SourceMapGenerator({\n    file: this.basename,\n    sourceRoot: sourcemap.sourceRoot || null\n  });\n  Compiler.call(this, root, options);\n};\n\n/**\n * Inherit from `Compiler.prototype`.\n */\n\nSourceMapper.prototype.__proto__ = Compiler.prototype;\n\n/**\n * Generate and write source map.\n *\n * @return {String}\n * @api private\n */\n\nvar compile = Compiler.prototype.compile;\nSourceMapper.prototype.compile = function(){\n  var css = compile.call(this)\n    , out = this.basename + '.map'\n    , url = this.normalizePath(this.dest\n      ? join(this.dest, out)\n      : join(dirname(this.filename), out))\n    , map;\n\n  if (this.inline) {\n    map = this.map.toString();\n    url = 'data:application/json;'\n      + (this.utf8 ?  'charset=utf-8;' : '') + 'base64,'\n      + Buffer.from(map).toString('base64');\n  }\n  if (this.inline || false !== this.comment)\n    css += '/*# sourceMappingURL=' + url + ' */';\n  return css;\n};\n\n/**\n * Add mapping information.\n *\n * @param {String} str\n * @param {Node} node\n * @return {String}\n * @api private\n */\n\nSourceMapper.prototype.out = function(str, node){\n  if (node && node.lineno) {\n    var filename = this.normalizePath(node.filename);\n\n    this.map.addMapping({\n      original: {\n        line: node.lineno,\n        column: node.column - 1\n      },\n      generated: {\n        line: this.lineno,\n        column: this.column - 1\n      },\n      source: filename\n    });\n\n    if (this.inline && !this.contents[filename]) {\n      this.map.setSourceContent(filename, fs.readFileSync(node.filename, 'utf-8'));\n      this.contents[filename] = true;\n    }\n  }\n\n  this.move(str);\n  return str;\n};\n\n/**\n * Move current line and column position.\n *\n * @param {String} str\n * @api private\n */\n\nSourceMapper.prototype.move = function(str){\n  var lines = str.match(/\\n/g)\n    , idx = str.lastIndexOf('\\n');\n\n  if (lines) this.lineno += lines.length;\n  this.column = ~idx\n    ? str.length - idx\n    : this.column + str.length;\n};\n\n/**\n * Normalize the given `path`.\n *\n * @param {String} path\n * @return {String}\n * @api private\n */\n\nSourceMapper.prototype.normalizePath = function(path){\n  path = relative(this.dest || this.basePath, path);\n  if ('\\\\' == sep) {\n    path = path.replace(/^[a-z]:\\\\/i, '/')\n      .replace(/\\\\/g, '/');\n  }\n  return path;\n};\n\n/**\n * Visit Literal.\n */\n\nvar literal = Compiler.prototype.visitLiteral;\nSourceMapper.prototype.visitLiteral = function(lit){\n  var val = literal.call(this, lit)\n    , filename = this.normalizePath(lit.filename)\n    , indentsRe = /^\\s+/\n    , lines = val.split('\\n');\n\n  // add mappings for multiline literals\n  if (lines.length > 1) {\n    lines.forEach(function(line, i) {\n      var indents = line.match(indentsRe)\n        , column = indents && indents[0]\n            ? indents[0].length\n            : 0;\n\n      if (lit.css) column += 2;\n\n      this.map.addMapping({\n        original: {\n          line: lit.lineno + i,\n          column: column\n        },\n        generated: {\n          line: this.lineno + i,\n          column: 0\n        },\n        source: filename\n      });\n    }, this);\n  }\n  return val;\n};\n\n/**\n * Visit Charset.\n */\n\nvar charset = Compiler.prototype.visitCharset;\nSourceMapper.prototype.visitCharset = function(node){\n  this.utf8 = ('utf-8' == node.val.string.toLowerCase());\n  return charset.call(this, node);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}