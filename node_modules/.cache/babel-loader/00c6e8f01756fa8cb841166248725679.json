{"ast":null,"code":"/* Determine browser vs node environment by testing the default top level context. Solution courtesy of: https://stackoverflow.com/questions/17575790/environment-detection-node-js-or-browser */\nvar isBrowserEnvironment = function () {\n  // eslint-disable-next-line no-undef\n  return typeof window !== \"undefined\" && this === window;\n}.call();\nif (isBrowserEnvironment) {\n  // Web version of reading a wasm file into an array buffer.\n\n  var mappingsWasm = null;\n  module.exports = function readWasm() {\n    if (typeof mappingsWasm === \"string\") {\n      return fetch(mappingsWasm).then(function (response) {\n        return response.arrayBuffer();\n      });\n    }\n    if (mappingsWasm instanceof ArrayBuffer) {\n      return Promise.resolve(mappingsWasm);\n    }\n    throw new Error(\"You must provide the string URL or ArrayBuffer contents \" + \"of lib/mappings.wasm by calling \" + \"SourceMapConsumer.initialize({ 'lib/mappings.wasm': ... }) \" + \"before using SourceMapConsumer\");\n  };\n  module.exports.initialize = function (input) {\n    return mappingsWasm = input;\n  };\n} else {\n  // Node version of reading a wasm file into an array buffer.\n  var fs = require(\"fs\");\n  var path = require(\"path\");\n  module.exports = function readWasm() {\n    return new Promise(function (resolve, reject) {\n      var wasmPath = path.join(__dirname, \"mappings.wasm\");\n      fs.readFile(wasmPath, null, function (error, data) {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(data.buffer);\n      });\n    });\n  };\n  module.exports.initialize = function (_) {\n    console.debug(\"SourceMapConsumer.initialize is a no-op when running in node.js\");\n  };\n}","map":{"version":3,"names":["isBrowserEnvironment","window","call","mappingsWasm","module","exports","readWasm","fetch","then","response","arrayBuffer","ArrayBuffer","Promise","resolve","Error","initialize","input","fs","require","path","reject","wasmPath","join","__dirname","readFile","error","data","buffer","_","console","debug"],"sources":["/Users/lisasavoie/Desktop/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/stylus/node_modules/source-map/lib/read-wasm.js"],"sourcesContent":["/* Determine browser vs node environment by testing the default top level context. Solution courtesy of: https://stackoverflow.com/questions/17575790/environment-detection-node-js-or-browser */\nconst isBrowserEnvironment = (function() {\n    // eslint-disable-next-line no-undef\n    return (typeof window !== \"undefined\") && (this === window);\n}).call();\n\nif (isBrowserEnvironment) {\n  // Web version of reading a wasm file into an array buffer.\n\n  let mappingsWasm = null;\n\n  module.exports = function readWasm() {\n    if (typeof mappingsWasm === \"string\") {\n      return fetch(mappingsWasm)\n        .then(response => response.arrayBuffer());\n    }\n    if (mappingsWasm instanceof ArrayBuffer) {\n      return Promise.resolve(mappingsWasm);\n    }\n    throw new Error(\"You must provide the string URL or ArrayBuffer contents \" +\n                    \"of lib/mappings.wasm by calling \" +\n                    \"SourceMapConsumer.initialize({ 'lib/mappings.wasm': ... }) \" +\n                    \"before using SourceMapConsumer\");\n  };\n\n  module.exports.initialize = input => mappingsWasm = input;\n} else {\n  // Node version of reading a wasm file into an array buffer.\n  const fs = require(\"fs\");\n  const path = require(\"path\");\n\n  module.exports = function readWasm() {\n    return new Promise((resolve, reject) => {\n      const wasmPath = path.join(__dirname, \"mappings.wasm\");\n      fs.readFile(wasmPath, null, (error, data) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve(data.buffer);\n      });\n    });\n  };\n\n  module.exports.initialize = _ => {\n    console.debug(\"SourceMapConsumer.initialize is a no-op when running in node.js\");\n  };\n}\n"],"mappings":"AAAA;AACA,IAAMA,oBAAoB,GAAI,YAAW;EACrC;EACA,OAAQ,OAAOC,MAAM,KAAK,WAAW,IAAM,IAAI,KAAKA,MAAO;AAC/D,CAAC,CAAEC,IAAI,EAAE;AAET,IAAIF,oBAAoB,EAAE;EACxB;;EAEA,IAAIG,YAAY,GAAG,IAAI;EAEvBC,MAAM,CAACC,OAAO,GAAG,SAASC,QAAQ,GAAG;IACnC,IAAI,OAAOH,YAAY,KAAK,QAAQ,EAAE;MACpC,OAAOI,KAAK,CAACJ,YAAY,CAAC,CACvBK,IAAI,CAAC,UAAAC,QAAQ;QAAA,OAAIA,QAAQ,CAACC,WAAW,EAAE;MAAA,EAAC;IAC7C;IACA,IAAIP,YAAY,YAAYQ,WAAW,EAAE;MACvC,OAAOC,OAAO,CAACC,OAAO,CAACV,YAAY,CAAC;IACtC;IACA,MAAM,IAAIW,KAAK,CAAC,0DAA0D,GAC1D,kCAAkC,GAClC,6DAA6D,GAC7D,gCAAgC,CAAC;EACnD,CAAC;EAEDV,MAAM,CAACC,OAAO,CAACU,UAAU,GAAG,UAAAC,KAAK;IAAA,OAAIb,YAAY,GAAGa,KAAK;EAAA;AAC3D,CAAC,MAAM;EACL;EACA,IAAMC,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;EACxB,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;EAE5Bd,MAAM,CAACC,OAAO,GAAG,SAASC,QAAQ,GAAG;IACnC,OAAO,IAAIM,OAAO,CAAC,UAACC,OAAO,EAAEO,MAAM,EAAK;MACtC,IAAMC,QAAQ,GAAGF,IAAI,CAACG,IAAI,CAACC,SAAS,EAAE,eAAe,CAAC;MACtDN,EAAE,CAACO,QAAQ,CAACH,QAAQ,EAAE,IAAI,EAAE,UAACI,KAAK,EAAEC,IAAI,EAAK;QAC3C,IAAID,KAAK,EAAE;UACTL,MAAM,CAACK,KAAK,CAAC;UACb;QACF;QAEAZ,OAAO,CAACa,IAAI,CAACC,MAAM,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAEDvB,MAAM,CAACC,OAAO,CAACU,UAAU,GAAG,UAAAa,CAAC,EAAI;IAC/BC,OAAO,CAACC,KAAK,CAAC,iEAAiE,CAAC;EAClF,CAAC;AACH"},"metadata":{},"sourceType":"script"}