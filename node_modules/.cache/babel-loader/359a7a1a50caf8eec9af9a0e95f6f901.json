{"ast":null,"code":"var _classCallCheck = require(\"/Users/lisasavoie/Desktop/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/lisasavoie/Desktop/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/@babel/runtime/helpers/createClass.js\").default;\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nvar ArraySet = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function ArraySet() {\n    _classCallCheck(this, ArraySet);\n    this._array = [];\n    this._set = new Map();\n  }\n\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n  _createClass(ArraySet, [{\n    key: \"size\",\n    value:\n    /**\n     * Return how many unique items are in this ArraySet. If duplicates have been\n     * added, than those do not count towards the size.\n     *\n     * @returns Number\n     */\n    function size() {\n      return this._set.size;\n    }\n\n    /**\n     * Add the given string to this set.\n     *\n     * @param String aStr\n     */\n  }, {\n    key: \"add\",\n    value: function add(aStr, aAllowDuplicates) {\n      var isDuplicate = this.has(aStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        this._set.set(aStr, idx);\n      }\n    }\n\n    /**\n     * Is the given string a member of this set?\n     *\n     * @param String aStr\n     */\n  }, {\n    key: \"has\",\n    value: function has(aStr) {\n      return this._set.has(aStr);\n    }\n\n    /**\n     * What is the index of the given string in the array?\n     *\n     * @param String aStr\n     */\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(aStr) {\n      var idx = this._set.get(aStr);\n      if (idx >= 0) {\n        return idx;\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }\n\n    /**\n     * What is the element at the given index?\n     *\n     * @param Number aIdx\n     */\n  }, {\n    key: \"at\",\n    value: function at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }\n\n    /**\n     * Returns the array representation of this set (which has the proper indices\n     * indicated by indexOf). Note that this is a copy of the internal array used\n     * for storing the members so that no one can mess with internal state.\n     */\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this._array.slice();\n    }\n  }], [{\n    key: \"fromArray\",\n    value: function fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }\n  }]);\n  return ArraySet;\n}();\nexports.ArraySet = ArraySet;","map":{"version":3,"names":["ArraySet","_array","_set","Map","size","aStr","aAllowDuplicates","isDuplicate","has","idx","length","push","set","get","Error","aIdx","slice","aArray","i","len","add","exports"],"sources":["/Users/lisasavoie/Desktop/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/stylus/node_modules/source-map/lib/array-set.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nclass ArraySet {\n  constructor() {\n    this._array = [];\n    this._set = new Map();\n  }\n\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n  static fromArray(aArray, aAllowDuplicates) {\n    const set = new ArraySet();\n    for (let i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n    return set;\n  }\n\n  /**\n   * Return how many unique items are in this ArraySet. If duplicates have been\n   * added, than those do not count towards the size.\n   *\n   * @returns Number\n   */\n  size() {\n    return this._set.size;\n  }\n\n  /**\n   * Add the given string to this set.\n   *\n   * @param String aStr\n   */\n  add(aStr, aAllowDuplicates) {\n    const isDuplicate = this.has(aStr);\n    const idx = this._array.length;\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n    if (!isDuplicate) {\n      this._set.set(aStr, idx);\n    }\n  }\n\n  /**\n   * Is the given string a member of this set?\n   *\n   * @param String aStr\n   */\n  has(aStr) {\n      return this._set.has(aStr);\n  }\n\n  /**\n   * What is the index of the given string in the array?\n   *\n   * @param String aStr\n   */\n  indexOf(aStr) {\n    const idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  }\n\n  /**\n   * What is the element at the given index?\n   *\n   * @param Number aIdx\n   */\n  at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n    throw new Error(\"No element indexed by \" + aIdx);\n  }\n\n  /**\n   * Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.\n   */\n  toArray() {\n    return this._array.slice();\n  }\n}\nexports.ArraySet = ArraySet;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA,IAMMA,QAAQ;EAAA;;EACZ,oBAAc;IAAA;IACZ,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,IAAI,GAAG,IAAIC,GAAG,EAAE;EACvB;;EAEA;AACF;AACA;EAFE;IAAA;IAAA;IAWA;AACF;AACA;AACA;AACA;AACA;IACE,gBAAO;MACL,OAAO,IAAI,CAACD,IAAI,CAACE,IAAI;IACvB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,aAAIC,IAAI,EAAEC,gBAAgB,EAAE;MAC1B,IAAMC,WAAW,GAAG,IAAI,CAACC,GAAG,CAACH,IAAI,CAAC;MAClC,IAAMI,GAAG,GAAG,IAAI,CAACR,MAAM,CAACS,MAAM;MAC9B,IAAI,CAACH,WAAW,IAAID,gBAAgB,EAAE;QACpC,IAAI,CAACL,MAAM,CAACU,IAAI,CAACN,IAAI,CAAC;MACxB;MACA,IAAI,CAACE,WAAW,EAAE;QAChB,IAAI,CAACL,IAAI,CAACU,GAAG,CAACP,IAAI,EAAEI,GAAG,CAAC;MAC1B;IACF;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,aAAIJ,IAAI,EAAE;MACN,OAAO,IAAI,CAACH,IAAI,CAACM,GAAG,CAACH,IAAI,CAAC;IAC9B;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,iBAAQA,IAAI,EAAE;MACZ,IAAMI,GAAG,GAAG,IAAI,CAACP,IAAI,CAACW,GAAG,CAACR,IAAI,CAAC;MAC/B,IAAII,GAAG,IAAI,CAAC,EAAE;QACV,OAAOA,GAAG;MACd;MACA,MAAM,IAAIK,KAAK,CAAC,GAAG,GAAGT,IAAI,GAAG,sBAAsB,CAAC;IACtD;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,YAAGU,IAAI,EAAE;MACP,IAAIA,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAG,IAAI,CAACd,MAAM,CAACS,MAAM,EAAE;QAC1C,OAAO,IAAI,CAACT,MAAM,CAACc,IAAI,CAAC;MAC1B;MACA,MAAM,IAAID,KAAK,CAAC,wBAAwB,GAAGC,IAAI,CAAC;IAClD;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,mBAAU;MACR,OAAO,IAAI,CAACd,MAAM,CAACe,KAAK,EAAE;IAC5B;EAAC;IAAA;IAAA,OA3ED,mBAAiBC,MAAM,EAAEX,gBAAgB,EAAE;MACzC,IAAMM,GAAG,GAAG,IAAIZ,QAAQ,EAAE;MAC1B,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGF,MAAM,CAACP,MAAM,EAAEQ,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QACjDN,GAAG,CAACQ,GAAG,CAACH,MAAM,CAACC,CAAC,CAAC,EAAEZ,gBAAgB,CAAC;MACtC;MACA,OAAOM,GAAG;IACZ;EAAC;EAAA;AAAA;AAuEHS,OAAO,CAACrB,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script"}