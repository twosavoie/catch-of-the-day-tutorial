{"ast":null,"code":"var utils = require('../utils');\n\n/**\n * Return the current selector or compile\n * selector from a string or a list.\n *\n * @param {String|Expression}\n * @return {String}\n * @api public\n */\n\n(module.exports = function selector() {\n  var stack = this.selectorStack,\n    args = [].slice.call(arguments);\n  if (1 == args.length) {\n    var expr = utils.unwrap(args[0]),\n      len = expr.nodes.length;\n\n    // selector('.a')\n    if (1 == len) {\n      utils.assertString(expr.first, 'selector');\n      var SelectorParser = require('../selector-parser'),\n        val = expr.first.string,\n        parsed = new SelectorParser(val).parse().val;\n      if (parsed == val) return val;\n      stack.push(parse(val));\n    } else if (len > 1) {\n      // selector-list = '.a', '.b', '.c'\n      // selector(selector-list)\n      if (expr.isList) {\n        pushToStack(expr.nodes, stack);\n        // selector('.a' '.b' '.c')\n      } else {\n        stack.push(parse(expr.nodes.map(function (node) {\n          utils.assertString(node, 'selector');\n          return node.string;\n        }).join(' ')));\n      }\n    }\n    // selector('.a', '.b', '.c')\n  } else if (args.length > 1) {\n    pushToStack(args, stack);\n  }\n  return stack.length ? utils.compileSelectors(stack).join(',') : '&';\n}).raw = true;\nfunction pushToStack(selectors, stack) {\n  selectors.forEach(function (sel) {\n    sel = sel.first;\n    utils.assertString(sel, 'selector');\n    stack.push(parse(sel.string));\n  });\n}\nfunction parse(selector) {\n  var Parser = new require('../parser'),\n    parser = new Parser(selector),\n    nodes;\n  parser.state.push('selector-parts');\n  nodes = parser.selector();\n  nodes.forEach(function (node) {\n    node.val = node.segments.map(function (seg) {\n      return seg.toString();\n    }).join('');\n  });\n  return nodes;\n}","map":{"version":3,"names":["utils","require","module","exports","selector","stack","selectorStack","args","slice","call","arguments","length","expr","unwrap","len","nodes","assertString","first","SelectorParser","val","string","parsed","parse","push","isList","pushToStack","map","node","join","compileSelectors","raw","selectors","forEach","sel","Parser","parser","state","segments","seg","toString"],"sources":["/Users/lisasavoie/Desktop/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/stylus/lib/functions/selector.js"],"sourcesContent":["var utils = require('../utils');\n\n/**\n * Return the current selector or compile\n * selector from a string or a list.\n *\n * @param {String|Expression}\n * @return {String}\n * @api public\n */\n\n(module.exports = function selector(){\n  var stack = this.selectorStack\n    , args = [].slice.call(arguments);\n\n  if (1 == args.length) {\n    var expr = utils.unwrap(args[0])\n      , len = expr.nodes.length;\n\n    // selector('.a')\n    if (1 == len) {\n      utils.assertString(expr.first, 'selector');\n      var SelectorParser = require('../selector-parser')\n        , val = expr.first.string\n        , parsed = new SelectorParser(val).parse().val;\n\n      if (parsed == val) return val;\n\n      stack.push(parse(val));\n    } else if (len > 1) {\n      // selector-list = '.a', '.b', '.c'\n      // selector(selector-list)\n      if (expr.isList) {\n        pushToStack(expr.nodes, stack);\n      // selector('.a' '.b' '.c')\n      } else {\n        stack.push(parse(expr.nodes.map(function(node){\n          utils.assertString(node, 'selector');\n          return node.string;\n        }).join(' ')));\n      }\n    }\n  // selector('.a', '.b', '.c')\n  } else if (args.length > 1) {\n    pushToStack(args, stack);\n  }\n\n  return stack.length ? utils.compileSelectors(stack).join(',') : '&';\n}).raw = true;\n\nfunction pushToStack(selectors, stack) {\n  selectors.forEach(function(sel) {\n    sel = sel.first;\n    utils.assertString(sel, 'selector');\n    stack.push(parse(sel.string));\n  });\n}\n\nfunction parse(selector) {\n  var Parser = new require('../parser')\n    , parser = new Parser(selector)\n    , nodes;\n  parser.state.push('selector-parts');\n  nodes = parser.selector();\n  nodes.forEach(function(node) {\n    node.val = node.segments.map(function(seg){\n      return seg.toString();\n    }).join('');\n  });\n  return nodes;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}